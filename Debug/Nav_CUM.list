
Nav_CUM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080049ec  080049ec  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ec  080049ec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080049f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000018  08004a0c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004a0c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa01  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f4  00000000  00000000  0002fa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000328a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108cf  00000000  00000000  00033550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100ff  00000000  00000000  00043e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066243  00000000  00000000  00053f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003058  00000000  00000000  000ba1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800479c 	.word	0x0800479c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	0800479c 	.word	0x0800479c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] != '\n')
 8000228:	4b70      	ldr	r3, [pc, #448]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b0a      	cmp	r3, #10
 800022e:	d100      	bne.n	8000232 <HAL_UART_RxCpltCallback+0x12>
 8000230:	e096      	b.n	8000360 <HAL_UART_RxCpltCallback+0x140>
		{
				if(rx_counter == 0)
 8000232:	4b6f      	ldr	r3, [pc, #444]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2b00      	cmp	r3, #0
 800023a:	d10f      	bne.n	800025c <HAL_UART_RxCpltCallback+0x3c>
				{
					if(rx_buffer[0]=='$') flag.flag_true = 1;
 800023c:	4b6b      	ldr	r3, [pc, #428]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b24      	cmp	r3, #36	; 0x24
 8000242:	d105      	bne.n	8000250 <HAL_UART_RxCpltCallback+0x30>
 8000244:	4b6b      	ldr	r3, [pc, #428]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	430a      	orrs	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	e058      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
					else flag.flag_true = 0;
 8000250:	4b68      	ldr	r3, [pc, #416]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	438a      	bics	r2, r1
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	e052      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
				}
				else if (rx_counter == 3 && flag.flag_true)
 800025c:	4b64      	ldr	r3, [pc, #400]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b03      	cmp	r3, #3
 8000264:	d116      	bne.n	8000294 <HAL_UART_RxCpltCallback+0x74>
 8000266:	4b63      	ldr	r3, [pc, #396]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2240      	movs	r2, #64	; 0x40
 800026c:	4013      	ands	r3, r2
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d00f      	beq.n	8000294 <HAL_UART_RxCpltCallback+0x74>
				{
					if(rx_buffer[0]=='G') flag.flag_true = 1;
 8000274:	4b5d      	ldr	r3, [pc, #372]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b47      	cmp	r3, #71	; 0x47
 800027a:	d105      	bne.n	8000288 <HAL_UART_RxCpltCallback+0x68>
 800027c:	4b5d      	ldr	r3, [pc, #372]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	e03c      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
					else flag.flag_true = 0;
 8000288:	4b5a      	ldr	r3, [pc, #360]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	438a      	bics	r2, r1
 8000290:	701a      	strb	r2, [r3, #0]
					if(rx_buffer[0]=='G') flag.flag_true = 1;
 8000292:	e036      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
				}
				else if (rx_counter == 4  && flag.flag_true)
 8000294:	4b56      	ldr	r3, [pc, #344]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b04      	cmp	r3, #4
 800029c:	d116      	bne.n	80002cc <HAL_UART_RxCpltCallback+0xac>
 800029e:	4b55      	ldr	r3, [pc, #340]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2240      	movs	r2, #64	; 0x40
 80002a4:	4013      	ands	r3, r2
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00f      	beq.n	80002cc <HAL_UART_RxCpltCallback+0xac>
				{
					if(rx_buffer[0]=='G') flag.flag_true = 1;
 80002ac:	4b4f      	ldr	r3, [pc, #316]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b47      	cmp	r3, #71	; 0x47
 80002b2:	d105      	bne.n	80002c0 <HAL_UART_RxCpltCallback+0xa0>
 80002b4:	4b4f      	ldr	r3, [pc, #316]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	430a      	orrs	r2, r1
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e020      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
					else flag.flag_true = 0;
 80002c0:	4b4c      	ldr	r3, [pc, #304]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	2140      	movs	r1, #64	; 0x40
 80002c6:	438a      	bics	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
					if(rx_buffer[0]=='G') flag.flag_true = 1;
 80002ca:	e01a      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
				}
				else if (rx_counter == 5  && flag.flag_true)
 80002cc:	4b48      	ldr	r3, [pc, #288]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d115      	bne.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
 80002d6:	4b47      	ldr	r3, [pc, #284]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2240      	movs	r2, #64	; 0x40
 80002dc:	4013      	ands	r3, r2
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d00e      	beq.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
					{
						if(rx_buffer[0]=='A') flag.flag_true = 1;
 80002e4:	4b41      	ldr	r3, [pc, #260]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b41      	cmp	r3, #65	; 0x41
 80002ea:	d105      	bne.n	80002f8 <HAL_UART_RxCpltCallback+0xd8>
 80002ec:	4b41      	ldr	r3, [pc, #260]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	430a      	orrs	r2, r1
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e004      	b.n	8000302 <HAL_UART_RxCpltCallback+0xe2>
						else flag.flag_true = 0;
 80002f8:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80002fa:	781a      	ldrb	r2, [r3, #0]
 80002fc:	2140      	movs	r1, #64	; 0x40
 80002fe:	438a      	bics	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
					}
			tx_buffer[rx_counter] = rx_buffer[0];
 8000302:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	001a      	movs	r2, r3
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 800030c:	7819      	ldrb	r1, [r3, #0]
 800030e:	4b3a      	ldr	r3, [pc, #232]	; (80003f8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000310:	5499      	strb	r1, [r3, r2]

			rx_counter++;
 8000312:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	3301      	adds	r3, #1
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 800031e:	701a      	strb	r2, [r3, #0]
			size_message = rx_counter;
 8000320:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b35      	ldr	r3, [pc, #212]	; (80003fc <HAL_UART_RxCpltCallback+0x1dc>)
 8000328:	701a      	strb	r2, [r3, #0]
			if (size_message >= size_tx_buffer && error_counter == 0)
 800032a:	4b34      	ldr	r3, [pc, #208]	; (80003fc <HAL_UART_RxCpltCallback+0x1dc>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b63      	cmp	r3, #99	; 0x63
 8000332:	d950      	bls.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <HAL_UART_RxCpltCallback+0x1e0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d14c      	bne.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
				{
					HAL_UART_Transmit(&huart1, error_message, sizeof error_message / sizeof error_message[0],0xffff);
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <HAL_UART_RxCpltCallback+0x1e4>)
 800033e:	4932      	ldr	r1, [pc, #200]	; (8000408 <HAL_UART_RxCpltCallback+0x1e8>)
 8000340:	4832      	ldr	r0, [pc, #200]	; (800040c <HAL_UART_RxCpltCallback+0x1ec>)
 8000342:	2209      	movs	r2, #9
 8000344:	f003 f866 	bl	8003414 <HAL_UART_Transmit>
					error_counter++;
 8000348:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <HAL_UART_RxCpltCallback+0x1e0>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <HAL_UART_RxCpltCallback+0x1e0>)
 8000352:	701a      	strb	r2, [r3, #0]
					flag.flag_send = 0;
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	2120      	movs	r1, #32
 800035a:	438a      	bics	r2, r1
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e03a      	b.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
				}
		}
	else if (rx_buffer[0] == '\n')
 8000360:	4b22      	ldr	r3, [pc, #136]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b0a      	cmp	r3, #10
 8000366:	d136      	bne.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
	{
		tx_buffer[rx_counter] = '\n';
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	001a      	movs	r2, r3
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000372:	210a      	movs	r1, #10
 8000374:	5499      	strb	r1, [r3, r2]
		//tx_buffer[rx_counter+1] = '\n';
		//tx_buffer[rx_counter + 2] = '\0';
		size_message = rx_counter+1;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	3301      	adds	r3, #1
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <HAL_UART_RxCpltCallback+0x1dc>)
 8000382:	701a      	strb	r2, [r3, #0]
		rx_counter = 0;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
		if (size_message >= size_tx_buffer)
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <HAL_UART_RxCpltCallback+0x1dc>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b63      	cmp	r3, #99	; 0x63
 8000392:	d90b      	bls.n	80003ac <HAL_UART_RxCpltCallback+0x18c>
			{
			flag.flag_send = 0;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	2120      	movs	r1, #32
 800039a:	438a      	bics	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, error_message,sizeof error_message / sizeof error_message[0],0xffff);
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <HAL_UART_RxCpltCallback+0x1e4>)
 80003a0:	4919      	ldr	r1, [pc, #100]	; (8000408 <HAL_UART_RxCpltCallback+0x1e8>)
 80003a2:	481a      	ldr	r0, [pc, #104]	; (800040c <HAL_UART_RxCpltCallback+0x1ec>)
 80003a4:	2209      	movs	r2, #9
 80003a6:	f003 f835 	bl	8003414 <HAL_UART_Transmit>
 80003aa:	e014      	b.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
			}
		else
		{
			if (flag.flag_true)
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2240      	movs	r2, #64	; 0x40
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d008      	beq.n	80003cc <HAL_UART_RxCpltCallback+0x1ac>
				{
				flag.flag_send = 1;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80003bc:	781a      	ldrb	r2, [r3, #0]
 80003be:	2120      	movs	r1, #32
 80003c0:	430a      	orrs	r2, r1
 80003c2:	701a      	strb	r2, [r3, #0]
					error_counter = 0;
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_UART_RxCpltCallback+0x1e0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	e004      	b.n	80003d6 <HAL_UART_RxCpltCallback+0x1b6>
				}
			else flag.flag_send = 0;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_UART_RxCpltCallback+0x1d4>)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	2120      	movs	r1, #32
 80003d2:	438a      	bics	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
			}
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80003d6:	4905      	ldr	r1, [pc, #20]	; (80003ec <HAL_UART_RxCpltCallback+0x1cc>)
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_UART_RxCpltCallback+0x1ec>)
 80003da:	2201      	movs	r2, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f003 f8c2 	bl	8003566 <HAL_UART_Receive_IT>
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	2000009c 	.word	0x2000009c
 80003f0:	20000104 	.word	0x20000104
 80003f4:	20000098 	.word	0x20000098
 80003f8:	200000a0 	.word	0x200000a0
 80003fc:	2000004d 	.word	0x2000004d
 8000400:	2000018d 	.word	0x2000018d
 8000404:	0000ffff 	.word	0x0000ffff
 8000408:	20000000 	.word	0x20000000
 800040c:	20000108 	.word	0x20000108

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fecc 	bl	80011b0 <HAL_Init>

  /* USER CODE BEGIN Init */

  flag.TM_flag = 0;
 8000418:	4b53      	ldr	r3, [pc, #332]	; (8000568 <main+0x158>)
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	2101      	movs	r1, #1
 800041e:	438a      	bics	r2, r1
 8000420:	701a      	strb	r2, [r3, #0]
  flag.Last_TM_flag = 0;
 8000422:	4b51      	ldr	r3, [pc, #324]	; (8000568 <main+0x158>)
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	2102      	movs	r1, #2
 8000428:	438a      	bics	r2, r1
 800042a:	701a      	strb	r2, [r3, #0]
  flag.TM_Send = 0;
 800042c:	4b4e      	ldr	r3, [pc, #312]	; (8000568 <main+0x158>)
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	2104      	movs	r1, #4
 8000432:	438a      	bics	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
  flag.TIM16_flag = 0;
 8000436:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <main+0x158>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	2108      	movs	r1, #8
 800043c:	438a      	bics	r2, r1
 800043e:	701a      	strb	r2, [r3, #0]
  flag.btnOn = 0;
 8000440:	4b49      	ldr	r3, [pc, #292]	; (8000568 <main+0x158>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	2110      	movs	r1, #16
 8000446:	438a      	bics	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
  flag.flag_send = 0;
 800044a:	4b47      	ldr	r3, [pc, #284]	; (8000568 <main+0x158>)
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	2120      	movs	r1, #32
 8000450:	438a      	bics	r2, r1
 8000452:	701a      	strb	r2, [r3, #0]
  flag.flag_true = 0;
 8000454:	4b44      	ldr	r3, [pc, #272]	; (8000568 <main+0x158>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	438a      	bics	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]

  pwrVal = 0;
 800045e:	4b43      	ldr	r3, [pc, #268]	; (800056c <main+0x15c>)
 8000460:	2200      	movs	r2, #0
 8000462:	801a      	strh	r2, [r3, #0]
  pwr_cnt = 0;
 8000464:	4b42      	ldr	r3, [pc, #264]	; (8000570 <main+0x160>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
  led_cnt = 0;
 800046a:	4b42      	ldr	r3, [pc, #264]	; (8000574 <main+0x164>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f896 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f9f6 	bl	8000864 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000478:	f000 f94c 	bl	8000714 <MX_TIM14_Init>
  MX_TIM16_Init();
 800047c:	f000 f972 	bl	8000764 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000480:	f000 f9c0 	bl	8000804 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000484:	f000 f996 	bl	80007b4 <MX_TIM17_Init>
  MX_ADC_Init();
 8000488:	f000 f8e8 	bl	800065c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 800048c:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <main+0x168>)
 800048e:	0018      	movs	r0, r3
 8000490:	f002 fd2e 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
  queue_message = 1;//î÷åðåäü îòïðàâêè ñîîáùåíèé èçíà÷àëüíî ðàâíà 1
 8000494:	4b39      	ldr	r3, [pc, #228]	; (800057c <main+0x16c>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
  rx_counter = 0;//Ñèìâîëû åùå íå ïðèõîäèëè. Áóäåò 0.
 800049a:	4b39      	ldr	r3, [pc, #228]	; (8000580 <main+0x170>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
  size_message = 0;//Ðàçìåðà îòïðàâëÿåìîãî ñîîáùåíèÿ åùå íå çíàåì. Áóäåò 0.
 80004a0:	4b38      	ldr	r3, [pc, #224]	; (8000584 <main+0x174>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
  error_counter = 0;//Îøèáîê åùå íå áûëî. Áóäåò 0.
 80004a6:	4b38      	ldr	r3, [pc, #224]	; (8000588 <main+0x178>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);//Ðàçðåøàåì ïðèåì äàííûõ, ðàçìåðîì â 1 ñèìâîë.
 80004ac:	4937      	ldr	r1, [pc, #220]	; (800058c <main+0x17c>)
 80004ae:	4b38      	ldr	r3, [pc, #224]	; (8000590 <main+0x180>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f003 f857 	bl	8003566 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag.flag_send == 1)
 80004b8:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <main+0x158>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2220      	movs	r2, #32
 80004be:	4013      	ands	r3, r2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d011      	beq.n	80004ea <main+0xda>
	  	  	  {//åñëè ðàçðåøåíî îòñûëàòü ñîîáùåíèå è î÷åðåäü íå ðàâíà ìàêñèìàëüíîé, òî
	  	  	  	  if (huart1.gState == HAL_UART_STATE_READY)// && tx_buffer[0] == '$' && tx_buffer[1] == 'G' && tx_buffer[2] == 'N')// && tx_buffer[3] == 'G')
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <main+0x180>)
 80004c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80004ca:	2b20      	cmp	r3, #32
 80004cc:	d10d      	bne.n	80004ea <main+0xda>
	  	  	  	  	  { //åñëè ïîðò ñâîáîäåí, è î÷åðåäü ñîîáùåíèÿ ñîîòâåòñòâóåò, òî
	  	  	  		  	  HAL_UART_Transmit(&huart1, tx_buffer, size_message,0xffff);//îòïðàâëÿåì ñîîáùåíèå, ÷åãî íàì òàì ïðèøëî â rx_buffer
 80004ce:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <main+0x174>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <main+0x184>)
 80004d8:	492f      	ldr	r1, [pc, #188]	; (8000598 <main+0x188>)
 80004da:	482d      	ldr	r0, [pc, #180]	; (8000590 <main+0x180>)
 80004dc:	f002 ff9a 	bl	8003414 <HAL_UART_Transmit>
	  	  	  		  	  flag.flag_send = 0;//ñòàâèì ñëåäóþùóþ î÷åðåäü, åñëè çàõîòèì åùå ÷òî-òî îòñûëàòü â ïîðò.
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <main+0x158>)
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	2120      	movs	r1, #32
 80004e6:	438a      	bics	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  }
	  	  	  }
	  if (flag.TM_flag == 1)
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <main+0x158>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0df      	beq.n	80004b8 <main+0xa8>
	  {
		  if (flag.Last_TM_flag == 0)
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <main+0x158>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2202      	movs	r2, #2
 80004fe:	4013      	ands	r3, r2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d106      	bne.n	8000514 <main+0x104>
		  {
			  TeleMetrySend();
 8000506:	f000 fa73 	bl	80009f0 <TeleMetrySend>
			  flag.Last_TM_flag = 1;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <main+0x158>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	2102      	movs	r1, #2
 8000510:	430a      	orrs	r2, r1
 8000512:	701a      	strb	r2, [r3, #0]
		  }

		  if (led_cnt > 0 && flag.TIM16_flag)
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <main+0x164>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d012      	beq.n	8000542 <main+0x132>
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <main+0x158>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2208      	movs	r2, #8
 8000522:	4013      	ands	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00b      	beq.n	8000542 <main+0x132>
		  {
			  flag.TIM16_flag = 0;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x158>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	2108      	movs	r1, #8
 8000530:	438a      	bics	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
			  led_cnt--;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <main+0x164>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3b01      	subs	r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <main+0x164>)
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	e011      	b.n	8000566 <main+0x156>
		  }
		  else if (led_cnt == 0)
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <main+0x164>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1b6      	bne.n	80004b8 <main+0xa8>
			  {
			  flag.TM_flag = 0;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <main+0x158>)
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	2101      	movs	r1, #1
 8000550:	438a      	bics	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
			  flag.Last_TM_flag = 0;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0x158>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	2102      	movs	r1, #2
 800055a:	438a      	bics	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&htim16);
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0x18c>)
 8000560:	0018      	movs	r0, r3
 8000562:	f002 fd11 	bl	8002f88 <HAL_TIM_Base_Stop_IT>
	  if (flag.flag_send == 1)
 8000566:	e7a7      	b.n	80004b8 <main+0xa8>
 8000568:	20000098 	.word	0x20000098
 800056c:	2000009a 	.word	0x2000009a
 8000570:	2000018e 	.word	0x2000018e
 8000574:	2000018c 	.word	0x2000018c
 8000578:	20000190 	.word	0x20000190
 800057c:	2000004c 	.word	0x2000004c
 8000580:	20000104 	.word	0x20000104
 8000584:	2000004d 	.word	0x2000004d
 8000588:	2000018d 	.word	0x2000018d
 800058c:	2000009c 	.word	0x2000009c
 8000590:	20000108 	.word	0x20000108
 8000594:	0000ffff 	.word	0x0000ffff
 8000598:	200000a0 	.word	0x200000a0
 800059c:	20000218 	.word	0x20000218

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b095      	sub	sp, #84	; 0x54
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	2420      	movs	r4, #32
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2330      	movs	r3, #48	; 0x30
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f004 f8eb 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	2310      	movs	r3, #16
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f004 f8e3 	bl	800478c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2310      	movs	r3, #16
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f004 f8dc 	bl	800478c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80005d4:	0021      	movs	r1, r4
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2212      	movs	r2, #18
 80005da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2201      	movs	r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2210      	movs	r2, #16
 80005ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2210      	movs	r2, #16
 80005f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 feed 	bl	80023dc <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000606:	f000 fc0b 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	2110      	movs	r1, #16
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2207      	movs	r2, #7
 8000610:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	22e0      	movs	r2, #224	; 0xe0
 8000622:	00d2      	lsls	r2, r2, #3
 8000624:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 f9f0 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000634:	f000 fbf4 	bl	8000e20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000638:	003b      	movs	r3, r7
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	003b      	movs	r3, r7
 8000646:	0018      	movs	r0, r3
 8000648:	f002 fb34 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000650:	f000 fbe6 	bl	8000e20 <Error_Handler>
  }
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b015      	add	sp, #84	; 0x54
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	230c      	movs	r3, #12
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 f88e 	bl	800478c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_ADC_Init+0xb0>)
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <MX_ADC_Init+0xb4>)
 8000674:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_ADC_Init+0xb0>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_ADC_Init+0xb0>)
 800067e:	2210      	movs	r2, #16
 8000680:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_ADC_Init+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_ADC_Init+0xb0>)
 800068a:	2201      	movs	r2, #1
 800068c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC_Init+0xb0>)
 8000690:	2204      	movs	r2, #4
 8000692:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ADC_Init+0xb0>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC_Init+0xb0>)
 800069c:	2200      	movs	r2, #0
 800069e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ADC_Init+0xb0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC_Init+0xb0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ADC_Init+0xb0>)
 80006ae:	22c2      	movs	r2, #194	; 0xc2
 80006b0:	32ff      	adds	r2, #255	; 0xff
 80006b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_ADC_Init+0xb0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC_Init+0xb0>)
 80006bc:	2224      	movs	r2, #36	; 0x24
 80006be:	2100      	movs	r1, #0
 80006c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_ADC_Init+0xb0>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_ADC_Init+0xb0>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fdd4 	bl	8001278 <HAL_ADC_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006d4:	f000 fba4 	bl	8000e20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0152      	lsls	r2, r2, #5
 80006e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0552      	lsls	r2, r2, #21
 80006ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_ADC_Init+0xb0>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 f907 	bl	8001908 <HAL_ADC_ConfigChannel>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006fe:	f000 fb8f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	200001d8 	.word	0x200001d8
 8000710:	40012400 	.word	0x40012400

08000714 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_TIM14_Init+0x40>)
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_TIM14_Init+0x44>)
 800071c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 999;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_TIM14_Init+0x40>)
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <MX_TIM14_Init+0x48>)
 8000722:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_TIM14_Init+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_TIM14_Init+0x40>)
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <MX_TIM14_Init+0x4c>)
 800072e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_TIM14_Init+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_TIM14_Init+0x40>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <MX_TIM14_Init+0x40>)
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fb86 	bl	8002e50 <HAL_TIM_Base_Init>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000748:	f000 fb6a 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000190 	.word	0x20000190
 8000758:	40002000 	.word	0x40002000
 800075c:	000003e7 	.word	0x000003e7
 8000760:	00001387 	.word	0x00001387

08000764 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_TIM16_Init+0x44>)
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_TIM16_Init+0x48>)
 800076c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM16_Init+0x44>)
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <MX_TIM16_Init+0x4c>)
 8000772:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_TIM16_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 249;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_TIM16_Init+0x44>)
 800077c:	22f9      	movs	r2, #249	; 0xf9
 800077e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_TIM16_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_TIM16_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM16_Init+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_TIM16_Init+0x44>)
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fb5b 	bl	8002e50 <HAL_TIM_Base_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800079e:	f000 fb3f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000218 	.word	0x20000218
 80007ac:	40014400 	.word	0x40014400
 80007b0:	000003e7 	.word	0x000003e7

080007b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <MX_TIM17_Init+0x48>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_TIM17_Init+0x4c>)
 80007c2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 29;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007cc:	221d      	movs	r2, #29
 80007ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MX_TIM17_Init+0x44>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 fb33 	bl	8002e50 <HAL_TIM_Base_Init>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80007ee:	f000 fb17 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000050 	.word	0x20000050
 80007fc:	40014800 	.word	0x40014800
 8000800:	000003e7 	.word	0x000003e7

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART1_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART1_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000810:	2296      	movs	r2, #150	; 0x96
 8000812:	0192      	lsls	r2, r2, #6
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fd8f 	bl	800336c <HAL_UART_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 fae5 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000108 	.word	0x20000108
 8000860:	40013800 	.word	0x40013800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	240c      	movs	r4, #12
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f003 ff89 	bl	800478c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_GPIO_Init+0xc4>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	03c9      	lsls	r1, r1, #15
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_GPIO_Init+0xc4>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	03db      	lsls	r3, r3, #15
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xc4>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0289      	lsls	r1, r1, #10
 80008a0:	430a      	orrs	r2, r1
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008a6:	695a      	ldr	r2, [r3, #20]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	029b      	lsls	r3, r3, #10
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	02c9      	lsls	r1, r1, #11
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	02db      	lsls	r3, r3, #11
 80008c8:	4013      	ands	r3, r2
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_GPIO_Init+0xc8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	2108      	movs	r1, #8
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fd48 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2202      	movs	r2, #2
 80008ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_GPIO_Init+0xc8>)
 80008f0:	0019      	movs	r1, r3
 80008f2:	0010      	movs	r0, r2
 80008f4:	f001 fbb4 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f8:	0021      	movs	r1, r4
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2208      	movs	r2, #8
 80008fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2201      	movs	r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	187b      	adds	r3, r7, r1
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <MX_GPIO_Init+0xc8>)
 8000916:	0019      	movs	r1, r3
 8000918:	0010      	movs	r0, r2
 800091a:	f001 fba1 	bl	8002060 <HAL_GPIO_Init>

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b009      	add	sp, #36	; 0x24
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <Bin2Str>:

/* USER CODE BEGIN 4 */
void Bin2Str(uint16_t data, char* pbuf)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	801a      	strh	r2, [r3, #0]
    //pbuf += 3 - 1;  // Установка указателя буфера на последний (старший)         //
    *pbuf++ = (data / 100)|0x30;   // Вычисление 3 разряда двоично-десятичного числа
 800093e:	1dbb      	adds	r3, r7, #6
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2164      	movs	r1, #100	; 0x64
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fbdf 	bl	8000108 <__udivsi3>
 800094a:	0003      	movs	r3, r0
 800094c:	b29b      	uxth	r3, r3
 800094e:	b2da      	uxtb	r2, r3
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	2130      	movs	r1, #48	; 0x30
 8000958:	430a      	orrs	r2, r1
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	701a      	strb	r2, [r3, #0]
    data %= 100;            //
 800095e:	1dbc      	adds	r4, r7, #6
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2164      	movs	r1, #100	; 0x64
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fc54 	bl	8000214 <__aeabi_uidivmod>
 800096c:	000b      	movs	r3, r1
 800096e:	8023      	strh	r3, [r4, #0]
    *pbuf++ = (data / 10)|0x30;    // Вычисление 2 разряда двоично-десятичного числа
 8000970:	1dbb      	adds	r3, r7, #6
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	210a      	movs	r1, #10
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fbc6 	bl	8000108 <__udivsi3>
 800097c:	0003      	movs	r3, r0
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2da      	uxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	1c59      	adds	r1, r3, #1
 8000986:	6039      	str	r1, [r7, #0]
 8000988:	2130      	movs	r1, #48	; 0x30
 800098a:	430a      	orrs	r2, r1
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	701a      	strb	r2, [r3, #0]
    data %= 10;             //
 8000990:	1dbc      	adds	r4, r7, #6
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	210a      	movs	r1, #10
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fc3b 	bl	8000214 <__aeabi_uidivmod>
 800099e:	000b      	movs	r3, r1
 80009a0:	8023      	strh	r3, [r4, #0]
    *pbuf++ = (data / 1)|0x30;     // Вычисление 1 разряда двоично-десятичного числа
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	1c59      	adds	r1, r3, #1
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	2130      	movs	r1, #48	; 0x30
 80009b0:	430a      	orrs	r2, r1
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
    data %= 1;
 80009b6:	1dbb      	adds	r3, r7, #6
 80009b8:	2200      	movs	r2, #0
 80009ba:	801a      	strh	r2, [r3, #0]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <pec_Update>:
uint16_t pec_Update(uint16_t pec)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	801a      	strh	r2, [r3, #0]
		   0x170, 0x172, 0x174, 0x175, 0x177, 0x179, 0x17A, 0x17C,
		   0x17E, 0x17F, 0x181, 0x183, 0x184, 0x186, 0x188, 0x189,
		   0x18B, 0x18C, 0x18E, 0x190, 0x191, 0x193, 0x195, 0x196,
		   0x198, 0x19A, 0x19B, 0x19D, 0x19F, 0x1A0, 0x1A2, 0x1A4
   };
  pec = lookup[pec];
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	8819      	ldrh	r1, [r3, #0]
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <pec_Update+0x28>)
 80009d8:	0049      	lsls	r1, r1, #1
 80009da:	5a8a      	ldrh	r2, [r1, r2]
 80009dc:	801a      	strh	r2, [r3, #0]
  return pec;
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	881b      	ldrh	r3, [r3, #0]
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	080047d4 	.word	0x080047d4

080009f0 <TeleMetrySend>:

void TeleMetrySend(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 80009f4:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <TeleMetrySend+0x154>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fd7e 	bl	80014f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 10);
 80009fc:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <TeleMetrySend+0x154>)
 80009fe:	210a      	movs	r1, #10
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fe0d 	bl	8001620 <HAL_ADC_PollForConversion>
	  pwrVal = HAL_ADC_GetValue(&hadc);
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <TeleMetrySend+0x154>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fea1 	bl	8001750 <HAL_ADC_GetValue>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b4d      	ldr	r3, [pc, #308]	; (8000b48 <TeleMetrySend+0x158>)
 8000a14:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <TeleMetrySend+0x154>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fdc1 	bl	80015a0 <HAL_ADC_Stop>

	  pwrVal = pec_Update(pwrVal);
 8000a1e:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <TeleMetrySend+0x158>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff ffce 	bl	80009c4 <pec_Update>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <TeleMetrySend+0x158>)
 8000a2e:	801a      	strh	r2, [r3, #0]
	  Bin2Str(pwrVal, buffStr);
 8000a30:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <TeleMetrySend+0x158>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	4a45      	ldr	r2, [pc, #276]	; (8000b4c <TeleMetrySend+0x15c>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ff79 	bl	8000930 <Bin2Str>

	  TM_Str[0]='#';
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <TeleMetrySend+0x160>)
 8000a40:	2223      	movs	r2, #35	; 0x23
 8000a42:	701a      	strb	r2, [r3, #0]
	  TM_Str[1]='T';
 8000a44:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <TeleMetrySend+0x160>)
 8000a46:	2254      	movs	r2, #84	; 0x54
 8000a48:	705a      	strb	r2, [r3, #1]
	  TM_Str[2]='M';
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <TeleMetrySend+0x160>)
 8000a4c:	224d      	movs	r2, #77	; 0x4d
 8000a4e:	709a      	strb	r2, [r3, #2]
	  TM_Str[3]=',';
 8000a50:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <TeleMetrySend+0x160>)
 8000a52:	222c      	movs	r2, #44	; 0x2c
 8000a54:	70da      	strb	r2, [r3, #3]
	  TM_Str[4]=buffStr[0];
 8000a56:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <TeleMetrySend+0x15c>)
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <TeleMetrySend+0x160>)
 8000a5c:	711a      	strb	r2, [r3, #4]
	  TM_Str[5]=buffStr[1];
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <TeleMetrySend+0x15c>)
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <TeleMetrySend+0x160>)
 8000a64:	715a      	strb	r2, [r3, #5]
	  TM_Str[6]='.';
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <TeleMetrySend+0x160>)
 8000a68:	222e      	movs	r2, #46	; 0x2e
 8000a6a:	719a      	strb	r2, [r3, #6]
	  TM_Str[7]=buffStr[2];
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <TeleMetrySend+0x15c>)
 8000a6e:	789a      	ldrb	r2, [r3, #2]
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <TeleMetrySend+0x160>)
 8000a72:	71da      	strb	r2, [r3, #7]
	  TM_Str[8]=',';
 8000a74:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <TeleMetrySend+0x160>)
 8000a76:	222c      	movs	r2, #44	; 0x2c
 8000a78:	721a      	strb	r2, [r3, #8]
	  TM_Str[9]='R';
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <TeleMetrySend+0x160>)
 8000a7c:	2252      	movs	r2, #82	; 0x52
 8000a7e:	725a      	strb	r2, [r3, #9]
	  TM_Str[10]=',';
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <TeleMetrySend+0x160>)
 8000a82:	222c      	movs	r2, #44	; 0x2c
 8000a84:	729a      	strb	r2, [r3, #10]
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_SET) TM_Str[11]='W';
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <TeleMetrySend+0x164>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fc50 	bl	8002330 <HAL_GPIO_ReadPin>
 8000a90:	0003      	movs	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d103      	bne.n	8000a9e <TeleMetrySend+0xae>
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <TeleMetrySend+0x160>)
 8000a98:	2257      	movs	r2, #87	; 0x57
 8000a9a:	72da      	strb	r2, [r3, #11]
 8000a9c:	e002      	b.n	8000aa4 <TeleMetrySend+0xb4>
	  else TM_Str[11]=' ';
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <TeleMetrySend+0x160>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	72da      	strb	r2, [r3, #11]
	  TM_Str[12]='*';
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <TeleMetrySend+0x160>)
 8000aa6:	222a      	movs	r2, #42	; 0x2a
 8000aa8:	731a      	strb	r2, [r3, #12]
	  CrcBuild();
 8000aaa:	f000 f85f 	bl	8000b6c <CrcBuild>
	  TM_Str[15]='\n';
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <TeleMetrySend+0x160>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	73da      	strb	r2, [r3, #15]
	  TM_Str[16]='\r';
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <TeleMetrySend+0x160>)
 8000ab6:	220d      	movs	r2, #13
 8000ab8:	741a      	strb	r2, [r3, #16]

	  if(huart1.gState == HAL_UART_STATE_READY)HAL_UART_Transmit(&huart1, TM_Str, 17, 0xFFFF);
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <TeleMetrySend+0x168>)
 8000abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d105      	bne.n	8000ace <TeleMetrySend+0xde>
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <TeleMetrySend+0x16c>)
 8000ac4:	4922      	ldr	r1, [pc, #136]	; (8000b50 <TeleMetrySend+0x160>)
 8000ac6:	4824      	ldr	r0, [pc, #144]	; (8000b58 <TeleMetrySend+0x168>)
 8000ac8:	2211      	movs	r2, #17
 8000aca:	f002 fca3 	bl	8003414 <HAL_UART_Transmit>
	  HAL_TIM_Base_Start_IT(&htim16);
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <TeleMetrySend+0x170>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fa0d 	bl	8002ef0 <HAL_TIM_Base_Start_IT>

	  if(pwrVal <= 300) pwr_cnt = 1;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <TeleMetrySend+0x158>)
 8000ad8:	881a      	ldrh	r2, [r3, #0]
 8000ada:	2396      	movs	r3, #150	; 0x96
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d803      	bhi.n	8000aea <TeleMetrySend+0xfa>
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <TeleMetrySend+0x174>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e022      	b.n	8000b30 <TeleMetrySend+0x140>
	  else if(pwrVal > 300 && pwrVal <= 340) pwr_cnt = 2;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <TeleMetrySend+0x158>)
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	2396      	movs	r3, #150	; 0x96
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d909      	bls.n	8000b0a <TeleMetrySend+0x11a>
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <TeleMetrySend+0x158>)
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	23aa      	movs	r3, #170	; 0xaa
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d803      	bhi.n	8000b0a <TeleMetrySend+0x11a>
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <TeleMetrySend+0x174>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e012      	b.n	8000b30 <TeleMetrySend+0x140>
	  else if(pwrVal > 340 && pwrVal <= 380) pwr_cnt = 3;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <TeleMetrySend+0x158>)
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	23aa      	movs	r3, #170	; 0xaa
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d909      	bls.n	8000b2a <TeleMetrySend+0x13a>
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <TeleMetrySend+0x158>)
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	23be      	movs	r3, #190	; 0xbe
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d803      	bhi.n	8000b2a <TeleMetrySend+0x13a>
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <TeleMetrySend+0x174>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e002      	b.n	8000b30 <TeleMetrySend+0x140>
	  else pwr_cnt = 4;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <TeleMetrySend+0x174>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	701a      	strb	r2, [r3, #0]

	  led_cnt = pwr_cnt*2;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <TeleMetrySend+0x174>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	18db      	adds	r3, r3, r3
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <TeleMetrySend+0x178>)
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200001d8 	.word	0x200001d8
 8000b48:	2000009a 	.word	0x2000009a
 8000b4c:	20000034 	.word	0x20000034
 8000b50:	20000038 	.word	0x20000038
 8000b54:	48000400 	.word	0x48000400
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	0000ffff 	.word	0x0000ffff
 8000b60:	20000218 	.word	0x20000218
 8000b64:	2000018e 	.word	0x2000018e
 8000b68:	2000018c 	.word	0x2000018c

08000b6c <CrcBuild>:

void CrcBuild (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	uint8_t crc = 0;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <=12; i++)
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e00d      	b.n	8000b9c <CrcBuild+0x30>
	{
		crc += TM_Str[i];
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4aa5      	ldr	r2, [pc, #660]	; (8000e1c <CrcBuild+0x2b0>)
 8000b86:	5cd1      	ldrb	r1, [r2, r3]
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	188a      	adds	r2, r1, r2
 8000b90:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <=12; i++)
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	3201      	adds	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b0c      	cmp	r3, #12
 8000ba2:	d9ed      	bls.n	8000b80 <CrcBuild+0x14>
	}
	uint8_t LB = crc&0x0f;
 8000ba4:	1c7b      	adds	r3, r7, #1
 8000ba6:	1dfa      	adds	r2, r7, #7
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	210f      	movs	r1, #15
 8000bac:	400a      	ands	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
	uint8_t HB = crc>>4;
 8000bb0:	003b      	movs	r3, r7
 8000bb2:	1dfa      	adds	r2, r7, #7
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	0912      	lsrs	r2, r2, #4
 8000bb8:	701a      	strb	r2, [r3, #0]
	uint8_t LB_cnt = 0;
 8000bba:	1d7b      	adds	r3, r7, #5
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	uint8_t HB_cnt = 0;
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]

	for (uint8_t a = 0; a <=HB; a++)
 8000bc6:	1cfb      	adds	r3, r7, #3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e009      	b.n	8000be2 <CrcBuild+0x76>
	{
		HB_cnt++;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	3201      	adds	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
	for (uint8_t a = 0; a <=HB; a++)
 8000bd8:	1cfb      	adds	r3, r7, #3
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	1cfb      	adds	r3, r7, #3
 8000bde:	3201      	adds	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	1cfa      	adds	r2, r7, #3
 8000be4:	003b      	movs	r3, r7
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d9ef      	bls.n	8000bce <CrcBuild+0x62>
	}

	if (HB_cnt == 0) TM_Str[13] = '0';
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <CrcBuild+0x92>
 8000bf6:	4b89      	ldr	r3, [pc, #548]	; (8000e1c <CrcBuild+0x2b0>)
 8000bf8:	2230      	movs	r2, #48	; 0x30
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	e076      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 1) TM_Str[13] = '1';
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d103      	bne.n	8000c0e <CrcBuild+0xa2>
 8000c06:	4b85      	ldr	r3, [pc, #532]	; (8000e1c <CrcBuild+0x2b0>)
 8000c08:	2231      	movs	r2, #49	; 0x31
 8000c0a:	735a      	strb	r2, [r3, #13]
 8000c0c:	e06e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 2) TM_Str[13] = '2';
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d103      	bne.n	8000c1e <CrcBuild+0xb2>
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <CrcBuild+0x2b0>)
 8000c18:	2232      	movs	r2, #50	; 0x32
 8000c1a:	735a      	strb	r2, [r3, #13]
 8000c1c:	e066      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 3) TM_Str[13] = '3';
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d103      	bne.n	8000c2e <CrcBuild+0xc2>
 8000c26:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <CrcBuild+0x2b0>)
 8000c28:	2233      	movs	r2, #51	; 0x33
 8000c2a:	735a      	strb	r2, [r3, #13]
 8000c2c:	e05e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 4) TM_Str[13] = '4';
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d103      	bne.n	8000c3e <CrcBuild+0xd2>
 8000c36:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <CrcBuild+0x2b0>)
 8000c38:	2234      	movs	r2, #52	; 0x34
 8000c3a:	735a      	strb	r2, [r3, #13]
 8000c3c:	e056      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 5) TM_Str[13] = '5';
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d103      	bne.n	8000c4e <CrcBuild+0xe2>
 8000c46:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <CrcBuild+0x2b0>)
 8000c48:	2235      	movs	r2, #53	; 0x35
 8000c4a:	735a      	strb	r2, [r3, #13]
 8000c4c:	e04e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 6) TM_Str[13] = '6';
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d103      	bne.n	8000c5e <CrcBuild+0xf2>
 8000c56:	4b71      	ldr	r3, [pc, #452]	; (8000e1c <CrcBuild+0x2b0>)
 8000c58:	2236      	movs	r2, #54	; 0x36
 8000c5a:	735a      	strb	r2, [r3, #13]
 8000c5c:	e046      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 7) TM_Str[13] = '7';
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d103      	bne.n	8000c6e <CrcBuild+0x102>
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <CrcBuild+0x2b0>)
 8000c68:	2237      	movs	r2, #55	; 0x37
 8000c6a:	735a      	strb	r2, [r3, #13]
 8000c6c:	e03e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 8) TM_Str[13] = '8';
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d103      	bne.n	8000c7e <CrcBuild+0x112>
 8000c76:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <CrcBuild+0x2b0>)
 8000c78:	2238      	movs	r2, #56	; 0x38
 8000c7a:	735a      	strb	r2, [r3, #13]
 8000c7c:	e036      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 9) TM_Str[13] = '9';
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d103      	bne.n	8000c8e <CrcBuild+0x122>
 8000c86:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <CrcBuild+0x2b0>)
 8000c88:	2239      	movs	r2, #57	; 0x39
 8000c8a:	735a      	strb	r2, [r3, #13]
 8000c8c:	e02e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 10) TM_Str[13] = 'A';
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d103      	bne.n	8000c9e <CrcBuild+0x132>
 8000c96:	4b61      	ldr	r3, [pc, #388]	; (8000e1c <CrcBuild+0x2b0>)
 8000c98:	2241      	movs	r2, #65	; 0x41
 8000c9a:	735a      	strb	r2, [r3, #13]
 8000c9c:	e026      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 11) TM_Str[13] = 'B';
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b0b      	cmp	r3, #11
 8000ca4:	d103      	bne.n	8000cae <CrcBuild+0x142>
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <CrcBuild+0x2b0>)
 8000ca8:	2242      	movs	r2, #66	; 0x42
 8000caa:	735a      	strb	r2, [r3, #13]
 8000cac:	e01e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 12) TM_Str[13] = 'C';
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b0c      	cmp	r3, #12
 8000cb4:	d103      	bne.n	8000cbe <CrcBuild+0x152>
 8000cb6:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <CrcBuild+0x2b0>)
 8000cb8:	2243      	movs	r2, #67	; 0x43
 8000cba:	735a      	strb	r2, [r3, #13]
 8000cbc:	e016      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 13) TM_Str[13] = 'D';
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b0d      	cmp	r3, #13
 8000cc4:	d103      	bne.n	8000cce <CrcBuild+0x162>
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <CrcBuild+0x2b0>)
 8000cc8:	2244      	movs	r2, #68	; 0x44
 8000cca:	735a      	strb	r2, [r3, #13]
 8000ccc:	e00e      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 14) TM_Str[13] = 'E';
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b0e      	cmp	r3, #14
 8000cd4:	d103      	bne.n	8000cde <CrcBuild+0x172>
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <CrcBuild+0x2b0>)
 8000cd8:	2245      	movs	r2, #69	; 0x45
 8000cda:	735a      	strb	r2, [r3, #13]
 8000cdc:	e006      	b.n	8000cec <CrcBuild+0x180>
	else if (HB_cnt == 15) TM_Str[13] = 'F';
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d102      	bne.n	8000cec <CrcBuild+0x180>
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <CrcBuild+0x2b0>)
 8000ce8:	2246      	movs	r2, #70	; 0x46
 8000cea:	735a      	strb	r2, [r3, #13]

	for (uint8_t b = 0; b <=LB; b++)
 8000cec:	1cbb      	adds	r3, r7, #2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e009      	b.n	8000d08 <CrcBuild+0x19c>
	{
		LB_cnt++;
 8000cf4:	1d7b      	adds	r3, r7, #5
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	1d7b      	adds	r3, r7, #5
 8000cfa:	3201      	adds	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
	for (uint8_t b = 0; b <=LB; b++)
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	1cbb      	adds	r3, r7, #2
 8000d04:	3201      	adds	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	1cba      	adds	r2, r7, #2
 8000d0a:	1c7b      	adds	r3, r7, #1
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d9ef      	bls.n	8000cf4 <CrcBuild+0x188>
	}
	if (LB_cnt == 0) TM_Str[14] = '0';
 8000d14:	1d7b      	adds	r3, r7, #5
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <CrcBuild+0x1b8>
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <CrcBuild+0x2b0>)
 8000d1e:	2230      	movs	r2, #48	; 0x30
 8000d20:	739a      	strb	r2, [r3, #14]
	else if (LB_cnt == 11) TM_Str[14] = 'B';
	else if (LB_cnt == 12) TM_Str[14] = 'C';
	else if (LB_cnt == 13) TM_Str[14] = 'D';
	else if (LB_cnt == 14) TM_Str[14] = 'E';
	else if (LB_cnt == 15) TM_Str[14] = 'F';
}
 8000d22:	e076      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 1) TM_Str[14] = '1';
 8000d24:	1d7b      	adds	r3, r7, #5
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d103      	bne.n	8000d34 <CrcBuild+0x1c8>
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <CrcBuild+0x2b0>)
 8000d2e:	2231      	movs	r2, #49	; 0x31
 8000d30:	739a      	strb	r2, [r3, #14]
}
 8000d32:	e06e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 2) TM_Str[14] = '2';
 8000d34:	1d7b      	adds	r3, r7, #5
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d103      	bne.n	8000d44 <CrcBuild+0x1d8>
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <CrcBuild+0x2b0>)
 8000d3e:	2232      	movs	r2, #50	; 0x32
 8000d40:	739a      	strb	r2, [r3, #14]
}
 8000d42:	e066      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 3) TM_Str[14] = '3';
 8000d44:	1d7b      	adds	r3, r7, #5
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d103      	bne.n	8000d54 <CrcBuild+0x1e8>
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <CrcBuild+0x2b0>)
 8000d4e:	2233      	movs	r2, #51	; 0x33
 8000d50:	739a      	strb	r2, [r3, #14]
}
 8000d52:	e05e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 4) TM_Str[14] = '4';
 8000d54:	1d7b      	adds	r3, r7, #5
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d103      	bne.n	8000d64 <CrcBuild+0x1f8>
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <CrcBuild+0x2b0>)
 8000d5e:	2234      	movs	r2, #52	; 0x34
 8000d60:	739a      	strb	r2, [r3, #14]
}
 8000d62:	e056      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 5) TM_Str[14] = '5';
 8000d64:	1d7b      	adds	r3, r7, #5
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d103      	bne.n	8000d74 <CrcBuild+0x208>
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <CrcBuild+0x2b0>)
 8000d6e:	2235      	movs	r2, #53	; 0x35
 8000d70:	739a      	strb	r2, [r3, #14]
}
 8000d72:	e04e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 6) TM_Str[14] = '6';
 8000d74:	1d7b      	adds	r3, r7, #5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d103      	bne.n	8000d84 <CrcBuild+0x218>
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <CrcBuild+0x2b0>)
 8000d7e:	2236      	movs	r2, #54	; 0x36
 8000d80:	739a      	strb	r2, [r3, #14]
}
 8000d82:	e046      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 7) TM_Str[14] = '7';
 8000d84:	1d7b      	adds	r3, r7, #5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d103      	bne.n	8000d94 <CrcBuild+0x228>
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <CrcBuild+0x2b0>)
 8000d8e:	2237      	movs	r2, #55	; 0x37
 8000d90:	739a      	strb	r2, [r3, #14]
}
 8000d92:	e03e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 8) TM_Str[14] = '8';
 8000d94:	1d7b      	adds	r3, r7, #5
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d103      	bne.n	8000da4 <CrcBuild+0x238>
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <CrcBuild+0x2b0>)
 8000d9e:	2238      	movs	r2, #56	; 0x38
 8000da0:	739a      	strb	r2, [r3, #14]
}
 8000da2:	e036      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 9) TM_Str[14] = '9';
 8000da4:	1d7b      	adds	r3, r7, #5
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d103      	bne.n	8000db4 <CrcBuild+0x248>
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <CrcBuild+0x2b0>)
 8000dae:	2239      	movs	r2, #57	; 0x39
 8000db0:	739a      	strb	r2, [r3, #14]
}
 8000db2:	e02e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 10) TM_Str[14] = 'A';
 8000db4:	1d7b      	adds	r3, r7, #5
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	d103      	bne.n	8000dc4 <CrcBuild+0x258>
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <CrcBuild+0x2b0>)
 8000dbe:	2241      	movs	r2, #65	; 0x41
 8000dc0:	739a      	strb	r2, [r3, #14]
}
 8000dc2:	e026      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 11) TM_Str[14] = 'B';
 8000dc4:	1d7b      	adds	r3, r7, #5
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b0b      	cmp	r3, #11
 8000dca:	d103      	bne.n	8000dd4 <CrcBuild+0x268>
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <CrcBuild+0x2b0>)
 8000dce:	2242      	movs	r2, #66	; 0x42
 8000dd0:	739a      	strb	r2, [r3, #14]
}
 8000dd2:	e01e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 12) TM_Str[14] = 'C';
 8000dd4:	1d7b      	adds	r3, r7, #5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	d103      	bne.n	8000de4 <CrcBuild+0x278>
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <CrcBuild+0x2b0>)
 8000dde:	2243      	movs	r2, #67	; 0x43
 8000de0:	739a      	strb	r2, [r3, #14]
}
 8000de2:	e016      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 13) TM_Str[14] = 'D';
 8000de4:	1d7b      	adds	r3, r7, #5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b0d      	cmp	r3, #13
 8000dea:	d103      	bne.n	8000df4 <CrcBuild+0x288>
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <CrcBuild+0x2b0>)
 8000dee:	2244      	movs	r2, #68	; 0x44
 8000df0:	739a      	strb	r2, [r3, #14]
}
 8000df2:	e00e      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 14) TM_Str[14] = 'E';
 8000df4:	1d7b      	adds	r3, r7, #5
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b0e      	cmp	r3, #14
 8000dfa:	d103      	bne.n	8000e04 <CrcBuild+0x298>
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <CrcBuild+0x2b0>)
 8000dfe:	2245      	movs	r2, #69	; 0x45
 8000e00:	739a      	strb	r2, [r3, #14]
}
 8000e02:	e006      	b.n	8000e12 <CrcBuild+0x2a6>
	else if (LB_cnt == 15) TM_Str[14] = 'F';
 8000e04:	1d7b      	adds	r3, r7, #5
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d102      	bne.n	8000e12 <CrcBuild+0x2a6>
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <CrcBuild+0x2b0>)
 8000e0e:	2246      	movs	r2, #70	; 0x46
 8000e10:	739a      	strb	r2, [r3, #14]
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000038 	.word	0x20000038

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_MspInit+0x44>)
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_MspInit+0x44>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_MspInit+0x44>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	69da      	ldr	r2, [r3, #28]
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x44>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0549      	lsls	r1, r1, #21
 8000e54:	430a      	orrs	r2, r1
 8000e56:	61da      	str	r2, [r3, #28]
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_MspInit+0x44>)
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	055b      	lsls	r3, r3, #21
 8000e60:	4013      	ands	r3, r2
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	2414      	movs	r4, #20
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	2314      	movs	r3, #20
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f003 fc80 	bl	800478c <memset>
  if(hadc->Instance==ADC1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <HAL_ADC_MspInit+0x94>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d133      	bne.n	8000efe <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0089      	lsls	r1, r1, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0289      	lsls	r1, r1, #10
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_ADC_MspInit+0x98>)
 8000ec2:	695a      	ldr	r2, [r3, #20]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	193a      	adds	r2, r7, r4
 8000ee2:	2390      	movs	r3, #144	; 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 f8b9 	bl	8002060 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200c      	movs	r0, #12
 8000ef4:	f001 f804 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f001 f816 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b00b      	add	sp, #44	; 0x2c
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40012400 	.word	0x40012400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <HAL_TIM_Base_MspInit+0xb8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d116      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f24:	69da      	ldr	r2, [r3, #28]
 8000f26:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0049      	lsls	r1, r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	61da      	str	r2, [r3, #28]
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2013      	movs	r0, #19
 8000f44:	f000 ffdc 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f48:	2013      	movs	r0, #19
 8000f4a:	f000 ffee 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f4e:	e036      	b.n	8000fbe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d116      	bne.n	8000f88 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f5c:	699a      	ldr	r2, [r3, #24]
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0289      	lsls	r1, r1, #10
 8000f64:	430a      	orrs	r2, r1
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f6a:	699a      	ldr	r2, [r3, #24]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	029b      	lsls	r3, r3, #10
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f000 ffc0 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000f80:	2015      	movs	r0, #21
 8000f82:	f000 ffd2 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000f86:	e01a      	b.n	8000fbe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_TIM_Base_MspInit+0xc4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d115      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	02c9      	lsls	r1, r1, #11
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0xbc>)
 8000fa2:	699a      	ldr	r2, [r3, #24]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	02db      	lsls	r3, r3, #11
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2016      	movs	r0, #22
 8000fb4:	f000 ffa4 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fb8:	2016      	movs	r0, #22
 8000fba:	f000 ffb6 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b006      	add	sp, #24
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40002000 	.word	0x40002000
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40014400 	.word	0x40014400
 8000fd4:	40014800 	.word	0x40014800

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	2414      	movs	r4, #20
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	2314      	movs	r3, #20
 8000fe8:	001a      	movs	r2, r3
 8000fea:	2100      	movs	r1, #0
 8000fec:	f003 fbce 	bl	800478c <memset>
  if(huart->Instance==USART1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_UART_MspInit+0xa0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13a      	bne.n	8001070 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UART_MspInit+0xa4>)
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	01c9      	lsls	r1, r1, #7
 8001004:	430a      	orrs	r2, r1
 8001006:	619a      	str	r2, [r3, #24]
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_UART_MspInit+0xa4>)
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	01db      	lsls	r3, r3, #7
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_UART_MspInit+0xa4>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0289      	lsls	r1, r1, #10
 8001020:	430a      	orrs	r2, r1
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_UART_MspInit+0xa4>)
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	029b      	lsls	r3, r3, #10
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001032:	0021      	movs	r1, r4
 8001034:	187b      	adds	r3, r7, r1
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2202      	movs	r2, #2
 800103e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2203      	movs	r2, #3
 800104a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2201      	movs	r2, #1
 8001050:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	187a      	adds	r2, r7, r1
 8001054:	2390      	movs	r3, #144	; 0x90
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f001 f800 	bl	8002060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	201b      	movs	r0, #27
 8001066:	f000 ff4b 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800106a:	201b      	movs	r0, #27
 800106c:	f000 ff5d 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b00b      	add	sp, #44	; 0x2c
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	40013800 	.word	0x40013800
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f8cc 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <ADC1_IRQHandler+0x14>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fb56 	bl	8001768 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200001d8 	.word	0x200001d8

080010c8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <TIM14_IRQHandler+0x1c>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 ff88 	bl	8002fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  flag.TM_flag = 1;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <TIM14_IRQHandler+0x20>)
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM14_IRQn 1 */
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000190 	.word	0x20000190
 80010e8:	20000098 	.word	0x20000098

080010ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <TIM16_IRQHandler+0x28>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 ff76 	bl	8002fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  flag.TIM16_flag = 1;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <TIM16_IRQHandler+0x2c>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	2108      	movs	r1, #8
 80010fe:	430a      	orrs	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <TIM16_IRQHandler+0x30>)
 8001104:	2108      	movs	r1, #8
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f94c 	bl	80023a4 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM16_IRQn 1 */
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20000218 	.word	0x20000218
 8001118:	20000098 	.word	0x20000098
 800111c:	48000400 	.word	0x48000400

08001120 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <TIM17_IRQHandler+0x14>)
 8001126:	0018      	movs	r0, r3
 8001128:	f001 ff5c 	bl	8002fe4 <HAL_TIM_IRQHandler>
	  }
	  else pwr_cnt = 1;
  }
  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_RESET && flag.btnOn==1) flag.btnOn = 0;*/
  /* USER CODE END TIM17_IRQn 1 */
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000050 	.word	0x20000050

08001138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <USART1_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f002 fa72 	bl	8003628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000108 	.word	0x20000108

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001186:	f7ff ffe3 	bl	8001150 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800118a:	f003 fadb 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118e:	f7ff f93f 	bl	8000410 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   r0, =_estack
 8001194:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011a0:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 80011a4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011a8:	20000264 	.word	0x20000264

080011ac <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <DMA1_Channel1_IRQHandler>
	...

080011b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_Init+0x24>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_Init+0x24>)
 80011ba:	2110      	movs	r1, #16
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f809 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fe31 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_InitTick+0x5c>)
 80011e2:	681c      	ldr	r4, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	0019      	movs	r1, r3
 80011ea:	23fa      	movs	r3, #250	; 0xfa
 80011ec:	0098      	lsls	r0, r3, #2
 80011ee:	f7fe ff8b 	bl	8000108 <__udivsi3>
 80011f2:	0003      	movs	r3, r0
 80011f4:	0019      	movs	r1, r3
 80011f6:	0020      	movs	r0, r4
 80011f8:	f7fe ff86 	bl	8000108 <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fea3 	bl	8001f4a <HAL_SYSTICK_Config>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e00f      	b.n	800122c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d80b      	bhi.n	800122a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2301      	movs	r3, #1
 8001216:	425b      	negs	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fe70 	bl	8001f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_InitTick+0x64>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b003      	add	sp, #12
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	2000000c 	.word	0x2000000c
 8001238:	20000014 	.word	0x20000014
 800123c:	20000010 	.word	0x20000010

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	001a      	movs	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	18d2      	adds	r2, r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_IncTick+0x20>)
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000014 	.word	0x20000014
 8001260:	20000260 	.word	0x20000260

08001264 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000260 	.word	0x20000260

08001278 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e125      	b.n	80014e2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10a      	bne.n	80012b4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2234      	movs	r2, #52	; 0x34
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff fde0 	bl	8000e74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b8:	2210      	movs	r2, #16
 80012ba:	4013      	ands	r3, r2
 80012bc:	d000      	beq.n	80012c0 <HAL_ADC_Init+0x48>
 80012be:	e103      	b.n	80014c8 <HAL_ADC_Init+0x250>
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d000      	beq.n	80012cc <HAL_ADC_Init+0x54>
 80012ca:	e0fd      	b.n	80014c8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2204      	movs	r2, #4
 80012d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80012d6:	d000      	beq.n	80012da <HAL_ADC_Init+0x62>
 80012d8:	e0f6      	b.n	80014c8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4a83      	ldr	r2, [pc, #524]	; (80014ec <HAL_ADC_Init+0x274>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	2202      	movs	r2, #2
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2203      	movs	r2, #3
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d112      	bne.n	800131e <HAL_ADC_Init+0xa6>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	2b01      	cmp	r3, #1
 8001304:	d009      	beq.n	800131a <HAL_ADC_Init+0xa2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	401a      	ands	r2, r3
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	429a      	cmp	r2, r3
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0xa6>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_ADC_Init+0xa8>
 800131e:	2300      	movs	r3, #0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d116      	bne.n	8001352 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2218      	movs	r2, #24
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	0899      	lsrs	r1, r3, #2
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4964      	ldr	r1, [pc, #400]	; (80014f0 <HAL_ADC_Init+0x278>)
 800135e:	400a      	ands	r2, r1
 8001360:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
 8001366:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7e5b      	ldrb	r3, [r3, #25]
 800136c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800136e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e9b      	ldrb	r3, [r3, #26]
 8001374:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001376:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	2b01      	cmp	r3, #1
 800137e:	d002      	beq.n	8001386 <HAL_ADC_Init+0x10e>
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	e000      	b.n	8001388 <HAL_ADC_Init+0x110>
 8001386:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001388:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800138e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d101      	bne.n	800139c <HAL_ADC_Init+0x124>
 8001398:	2304      	movs	r3, #4
 800139a:	e000      	b.n	800139e <HAL_ADC_Init+0x126>
 800139c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800139e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2124      	movs	r1, #36	; 0x24
 80013a4:	5c5b      	ldrb	r3, [r3, r1]
 80013a6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7edb      	ldrb	r3, [r3, #27]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d115      	bne.n	80013e4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e9b      	ldrb	r3, [r3, #26]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	0252      	lsls	r2, r2, #9
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	e00b      	b.n	80013e4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d0:	2220      	movs	r2, #32
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	23c2      	movs	r3, #194	; 0xc2
 80013ea:	33ff      	adds	r3, #255	; 0xff
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d007      	beq.n	8001400 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013f8:	4313      	orrs	r3, r2
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	055b      	lsls	r3, r3, #21
 8001418:	429a      	cmp	r2, r3
 800141a:	d01b      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	2b01      	cmp	r3, #1
 8001422:	d017      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2b02      	cmp	r3, #2
 800142a:	d013      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	2b03      	cmp	r3, #3
 8001432:	d00f      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00b      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	2b05      	cmp	r3, #5
 8001442:	d007      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b06      	cmp	r3, #6
 800144a:	d003      	beq.n	8001454 <HAL_ADC_Init+0x1dc>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b07      	cmp	r3, #7
 8001452:	d112      	bne.n	800147a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2107      	movs	r1, #7
 8001460:	438a      	bics	r2, r1
 8001462:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6959      	ldr	r1, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	2207      	movs	r2, #7
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <HAL_ADC_Init+0x27c>)
 8001482:	4013      	ands	r3, r2
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d10b      	bne.n	80014a2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	2203      	movs	r2, #3
 8001496:	4393      	bics	r3, r2
 8001498:	2201      	movs	r2, #1
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014a0:	e01c      	b.n	80014dc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	2212      	movs	r2, #18
 80014a8:	4393      	bics	r3, r2
 80014aa:	2210      	movs	r2, #16
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b6:	2201      	movs	r2, #1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80014be:	230f      	movs	r3, #15
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014c6:	e009      	b.n	80014dc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	2210      	movs	r2, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	fffffefd 	.word	0xfffffefd
 80014f0:	fffe0219 	.word	0xfffe0219
 80014f4:	833fffe7 	.word	0x833fffe7

080014f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	230f      	movs	r3, #15
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2204      	movs	r2, #4
 8001510:	4013      	ands	r3, r2
 8001512:	d138      	bne.n	8001586 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Start+0x2a>
 800151e:	2302      	movs	r3, #2
 8001520:	e038      	b.n	8001594 <HAL_ADC_Start+0x9c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2234      	movs	r2, #52	; 0x34
 8001526:	2101      	movs	r1, #1
 8001528:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7e5b      	ldrb	r3, [r3, #25]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d007      	beq.n	8001542 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001532:	230f      	movs	r3, #15
 8001534:	18fc      	adds	r4, r7, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	0018      	movs	r0, r3
 800153a:	f000 faf3 	bl	8001b24 <ADC_Enable>
 800153e:	0003      	movs	r3, r0
 8001540:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d120      	bne.n	800158e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_ADC_Start+0xa4>)
 8001552:	4013      	ands	r3, r2
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0052      	lsls	r2, r2, #1
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2234      	movs	r2, #52	; 0x34
 8001568:	2100      	movs	r1, #0
 800156a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	221c      	movs	r2, #28
 8001572:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2104      	movs	r1, #4
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e003      	b.n	800158e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b005      	add	sp, #20
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	fffff0fe 	.word	0xfffff0fe

080015a0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	5c9b      	ldrb	r3, [r3, r2]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Stop+0x1e>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e029      	b.n	8001612 <HAL_ADC_Stop+0x72>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2234      	movs	r2, #52	; 0x34
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80015c6:	250f      	movs	r5, #15
 80015c8:	197c      	adds	r4, r7, r5
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 fb9e 	bl	8001d0e <ADC_ConversionStop>
 80015d2:	0003      	movs	r3, r0
 80015d4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d112      	bne.n	8001604 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015de:	197c      	adds	r4, r7, r5
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fb22 	bl	8001c2c <ADC_Disable>
 80015e8:	0003      	movs	r3, r0
 80015ea:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015ec:	197b      	adds	r3, r7, r5
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_ADC_Stop+0x7c>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2234      	movs	r2, #52	; 0x34
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800160c:	230f      	movs	r3, #15
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	781b      	ldrb	r3, [r3, #0]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	fffffefe 	.word	0xfffffefe

08001620 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d102      	bne.n	8001638 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001632:	2308      	movs	r3, #8
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e014      	b.n	8001662 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10b      	bne.n	800165e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	2220      	movs	r2, #32
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2234      	movs	r2, #52	; 0x34
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e071      	b.n	8001742 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800165e:	230c      	movs	r3, #12
 8001660:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001662:	f7ff fdff 	bl	8001264 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800166a:	e01f      	b.n	80016ac <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	d01c      	beq.n	80016ac <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_ADC_PollForConversion+0x68>
 8001678:	f7ff fdf4 	bl	8001264 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d211      	bcs.n	80016ac <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	2204      	movs	r2, #4
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2234      	movs	r2, #52	; 0x34
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e04a      	b.n	8001742 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0d9      	beq.n	800166c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	23c0      	movs	r3, #192	; 0xc0
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d12d      	bne.n	8001730 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d129      	bne.n	8001730 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d122      	bne.n	8001730 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2204      	movs	r2, #4
 80016f2:	4013      	ands	r3, r2
 80016f4:	d110      	bne.n	8001718 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	210c      	movs	r1, #12
 8001702:	438a      	bics	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_ADC_PollForConversion+0x12c>)
 800170c:	4013      	ands	r3, r2
 800170e:	2201      	movs	r2, #1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	e00b      	b.n	8001730 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171c:	2220      	movs	r2, #32
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	2201      	movs	r2, #1
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d103      	bne.n	8001740 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	220c      	movs	r2, #12
 800173e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	fffffefe 	.word	0xfffffefe

08001750 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	4013      	ands	r3, r2
 800177a:	2b04      	cmp	r3, #4
 800177c:	d106      	bne.n	800178c <HAL_ADC_IRQHandler+0x24>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00d      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2208      	movs	r2, #8
 8001794:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001796:	2b08      	cmp	r3, #8
 8001798:	d14f      	bne.n	800183a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2208      	movs	r2, #8
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d148      	bne.n	800183a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	2210      	movs	r2, #16
 80017ae:	4013      	ands	r3, r2
 80017b0:	d106      	bne.n	80017c0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4013      	ands	r3, r2
 80017cc:	d12d      	bne.n	800182a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d129      	bne.n	800182a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2208      	movs	r2, #8
 80017de:	4013      	ands	r3, r2
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d122      	bne.n	800182a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2204      	movs	r2, #4
 80017ec:	4013      	ands	r3, r2
 80017ee:	d110      	bne.n	8001812 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	210c      	movs	r1, #12
 80017fc:	438a      	bics	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <HAL_ADC_IRQHandler+0x16c>)
 8001806:	4013      	ands	r3, r2
 8001808:	2201      	movs	r2, #1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	639a      	str	r2, [r3, #56]	; 0x38
 8001810:	e00b      	b.n	800182a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	2220      	movs	r2, #32
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001822:	2201      	movs	r2, #1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	f000 f853 	bl	80018d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	4013      	ands	r3, r2
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d115      	bne.n	8001874 <HAL_ADC_IRQHandler+0x10c>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	4013      	ands	r3, r2
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d10e      	bne.n	8001874 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	0252      	lsls	r2, r2, #9
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f83e 	bl	80018e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2210      	movs	r2, #16
 800187c:	4013      	ands	r3, r2
 800187e:	2b10      	cmp	r3, #16
 8001880:	d123      	bne.n	80018ca <HAL_ADC_IRQHandler+0x162>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2210      	movs	r2, #16
 800188a:	4013      	ands	r3, r2
 800188c:	2b10      	cmp	r3, #16
 800188e:	d11c      	bne.n	80018ca <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	2b01      	cmp	r3, #1
 8001896:	d006      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10d      	bne.n	80018c2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2202      	movs	r2, #2
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2210      	movs	r2, #16
 80018b8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 f81b 	bl	80018f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2210      	movs	r2, #16
 80018c8:	601a      	str	r2, [r3, #0]
  }

}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	fffffefe 	.word	0xfffffefe

080018d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001912:	230f      	movs	r3, #15
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	055b      	lsls	r3, r3, #21
 8001926:	429a      	cmp	r2, r3
 8001928:	d011      	beq.n	800194e <HAL_ADC_ConfigChannel+0x46>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d00d      	beq.n	800194e <HAL_ADC_ConfigChannel+0x46>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	2b02      	cmp	r3, #2
 8001938:	d009      	beq.n	800194e <HAL_ADC_ConfigChannel+0x46>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	2b03      	cmp	r3, #3
 8001940:	d005      	beq.n	800194e <HAL_ADC_ConfigChannel+0x46>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	2b04      	cmp	r3, #4
 8001948:	d001      	beq.n	800194e <HAL_ADC_ConfigChannel+0x46>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2234      	movs	r2, #52	; 0x34
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x54>
 8001958:	2302      	movs	r3, #2
 800195a:	e0d0      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1f6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2234      	movs	r2, #52	; 0x34
 8001960:	2101      	movs	r1, #1
 8001962:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2204      	movs	r2, #4
 800196c:	4013      	ands	r3, r2
 800196e:	d000      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x6a>
 8001970:	e0b4      	b.n	8001adc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a64      	ldr	r2, [pc, #400]	; (8001b08 <HAL_ADC_ConfigChannel+0x200>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_ADC_ConfigChannel+0x76>
 800197c:	e082      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	409a      	lsls	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	055b      	lsls	r3, r3, #21
 800199c:	429a      	cmp	r2, r3
 800199e:	d037      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d033      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d02f      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d02b      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d027      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d023      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	d01f      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	d01b      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2107      	movs	r1, #7
 80019e4:	400b      	ands	r3, r1
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d012      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2107      	movs	r1, #7
 80019f6:	438a      	bics	r2, r1
 80019f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6959      	ldr	r1, [r3, #20]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2207      	movs	r2, #7
 8001a06:	401a      	ands	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d007      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x120>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d003      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x120>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b12      	cmp	r3, #18
 8001a26:	d163      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_ADC_ConfigChannel+0x204>)
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d009      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x140>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d102      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x13a>
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	03db      	lsls	r3, r3, #15
 8001a40:	e004      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x144>
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	045b      	lsls	r3, r3, #17
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x144>
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_ADC_ConfigChannel+0x204>)
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d14a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_ADC_ConfigChannel+0x208>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	492d      	ldr	r1, [pc, #180]	; (8001b14 <HAL_ADC_ConfigChannel+0x20c>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe fb51 	bl	8000108 <__udivsi3>
 8001a66:	0003      	movs	r3, r0
 8001a68:	001a      	movs	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x16e>
 8001a82:	e035      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4099      	lsls	r1, r3
 8001a92:	000b      	movs	r3, r1
 8001a94:	43d9      	mvns	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x1ae>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d003      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x1ae>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d11c      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_ADC_ConfigChannel+0x204>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x1ca>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x1c6>
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_ADC_ConfigChannel+0x210>)
 8001acc:	e002      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_ADC_ConfigChannel+0x214>)
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_ADC_ConfigChannel+0x218>)
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_ADC_ConfigChannel+0x204>)
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e009      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2234      	movs	r2, #52	; 0x34
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	00001001 	.word	0x00001001
 8001b0c:	40012708 	.word	0x40012708
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	000f4240 	.word	0x000f4240
 8001b18:	ffbfffff 	.word	0xffbfffff
 8001b1c:	feffffff 	.word	0xfeffffff
 8001b20:	ff7fffff 	.word	0xff7fffff

08001b24 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d112      	bne.n	8001b68 <ADC_Enable+0x44>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d009      	beq.n	8001b64 <ADC_Enable+0x40>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d101      	bne.n	8001b68 <ADC_Enable+0x44>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <ADC_Enable+0x46>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d152      	bne.n	8001c14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <ADC_Enable+0xfc>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	2210      	movs	r2, #16
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e03f      	b.n	8001c16 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <ADC_Enable+0x100>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	491f      	ldr	r1, [pc, #124]	; (8001c28 <ADC_Enable+0x104>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe faab 	bl	8000108 <__udivsi3>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bb6:	e002      	b.n	8001bbe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff fb4e 	bl	8001264 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bcc:	e01b      	b.n	8001c06 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bce:	f7ff fb49 	bl	8001264 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d914      	bls.n	8001c06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d00d      	beq.n	8001c06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	2210      	movs	r2, #16
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e007      	b.n	8001c16 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d1dc      	bne.n	8001bce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	80000017 	.word	0x80000017
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	000f4240 	.word	0x000f4240

08001c2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d112      	bne.n	8001c6c <ADC_Disable+0x40>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d009      	beq.n	8001c68 <ADC_Disable+0x3c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	401a      	ands	r2, r3
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d101      	bne.n	8001c6c <ADC_Disable+0x40>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <ADC_Disable+0x42>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d048      	beq.n	8001d04 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d110      	bne.n	8001ca2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2203      	movs	r2, #3
 8001c96:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c98:	f7ff fae4 	bl	8001264 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ca0:	e029      	b.n	8001cf6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e023      	b.n	8001d06 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cbe:	f7ff fad1 	bl	8001264 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d914      	bls.n	8001cf6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10d      	bne.n	8001cf6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	2210      	movs	r2, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	2201      	movs	r2, #1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d0dc      	beq.n	8001cbe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2204      	movs	r2, #4
 8001d22:	4013      	ands	r3, r2
 8001d24:	d03a      	beq.n	8001d9c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d10d      	bne.n	8001d50 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d3e:	d107      	bne.n	8001d50 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa88 	bl	8001264 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d58:	e01a      	b.n	8001d90 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d5a:	f7ff fa83 	bl	8001264 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d913      	bls.n	8001d90 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4013      	ands	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d78:	2210      	movs	r2, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	2201      	movs	r2, #1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e006      	b.n	8001d9e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2204      	movs	r2, #4
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d1de      	bne.n	8001d5a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	0002      	movs	r2, r0
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dba:	d809      	bhi.n	8001dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_EnableIRQ+0x30>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4091      	lsls	r1, r2
 8001dcc:	000a      	movs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
  }
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	0002      	movs	r2, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b7f      	cmp	r3, #127	; 0x7f
 8001df0:	d828      	bhi.n	8001e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df2:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <__NVIC_SetPriority+0xd4>)
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	33c0      	adds	r3, #192	; 0xc0
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	589b      	ldr	r3, [r3, r2]
 8001e02:	1dfa      	adds	r2, r7, #7
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	0011      	movs	r1, r2
 8001e08:	2203      	movs	r2, #3
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	43d2      	mvns	r2, r2
 8001e16:	401a      	ands	r2, r3
 8001e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	401a      	ands	r2, r3
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	2303      	movs	r3, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	481f      	ldr	r0, [pc, #124]	; (8001eb0 <__NVIC_SetPriority+0xd4>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	33c0      	adds	r3, #192	; 0xc0
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e42:	e031      	b.n	8001ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e44:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <__NVIC_SetPriority+0xd8>)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	400b      	ands	r3, r1
 8001e50:	3b08      	subs	r3, #8
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3306      	adds	r3, #6
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1dfa      	adds	r2, r7, #7
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	0011      	movs	r1, r2
 8001e64:	2203      	movs	r2, #3
 8001e66:	400a      	ands	r2, r1
 8001e68:	00d2      	lsls	r2, r2, #3
 8001e6a:	21ff      	movs	r1, #255	; 0xff
 8001e6c:	4091      	lsls	r1, r2
 8001e6e:	000a      	movs	r2, r1
 8001e70:	43d2      	mvns	r2, r2
 8001e72:	401a      	ands	r2, r3
 8001e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	0018      	movs	r0, r3
 8001e84:	2303      	movs	r3, #3
 8001e86:	4003      	ands	r3, r0
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <__NVIC_SetPriority+0xd8>)
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	001c      	movs	r4, r3
 8001e94:	230f      	movs	r3, #15
 8001e96:	4023      	ands	r3, r4
 8001e98:	3b08      	subs	r3, #8
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	18c3      	adds	r3, r0, r3
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b003      	add	sp, #12
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1e5a      	subs	r2, r3, #1
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	045b      	lsls	r3, r3, #17
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d301      	bcc.n	8001ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e010      	b.n	8001ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <SysTick_Config+0x44>)
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	3a01      	subs	r2, #1
 8001ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	425b      	negs	r3, r3
 8001edc:	2103      	movs	r1, #3
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff ff7c 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x44>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x44>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	1c02      	adds	r2, r0, #0
 8001f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b004      	add	sp, #16
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	0002      	movs	r2, r0
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff33 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ffaf 	bl	8001eb8 <SysTick_Config>
 8001f5a:	0003      	movs	r3, r0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2221      	movs	r2, #33	; 0x21
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e020      	b.n	8001fcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	210e      	movs	r1, #14
 8001f96:	438a      	bics	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	210f      	movs	r1, #15
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d006      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e028      	b.n	8002050 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	210e      	movs	r1, #14
 800200a:	438a      	bics	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	4091      	lsls	r1, r2
 800202a:	000a      	movs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2221      	movs	r2, #33	; 0x21
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	0010      	movs	r0, r2
 800204e:	4798      	blx	r3
    } 
  }
  return status;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	e149      	b.n	8002304 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d100      	bne.n	8002088 <HAL_GPIO_Init+0x28>
 8002086:	e13a      	b.n	80022fe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2203      	movs	r2, #3
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d005      	beq.n	80020a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800209c:	2b02      	cmp	r3, #2
 800209e:	d130      	bne.n	8002102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	43da      	mvns	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d6:	2201      	movs	r2, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	2201      	movs	r2, #1
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	4013      	ands	r3, r2
 800210a:	2b03      	cmp	r3, #3
 800210c:	d017      	beq.n	800213e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	43da      	mvns	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d123      	bne.n	8002192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	58d3      	ldr	r3, [r2, r3]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2207      	movs	r2, #7
 800215c:	4013      	ands	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2107      	movs	r1, #7
 8002176:	400b      	ands	r3, r1
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	6939      	ldr	r1, [r7, #16]
 8002190:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	401a      	ands	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	4013      	ands	r3, r2
 80021d0:	d100      	bne.n	80021d4 <HAL_GPIO_Init+0x174>
 80021d2:	e094      	b.n	80022fe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d4:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_GPIO_Init+0x2bc>)
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_GPIO_Init+0x2bc>)
 80021da:	2101      	movs	r1, #1
 80021dc:	430a      	orrs	r2, r1
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_GPIO_Init+0x2bc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x2c0>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	589b      	ldr	r3, [r3, r2]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2203      	movs	r2, #3
 80021fe:	4013      	ands	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	409a      	lsls	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	43da      	mvns	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	2390      	movs	r3, #144	; 0x90
 8002214:	05db      	lsls	r3, r3, #23
 8002216:	429a      	cmp	r2, r3
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x1d6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a41      	ldr	r2, [pc, #260]	; (8002324 <HAL_GPIO_Init+0x2c4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x1d2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a40      	ldr	r2, [pc, #256]	; (8002328 <HAL_GPIO_Init+0x2c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x1ce>
 800222a:	2302      	movs	r3, #2
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x1d8>
 800222e:	2305      	movs	r3, #5
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x1d8>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x1d8>
 8002236:	2300      	movs	r3, #0
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	2103      	movs	r1, #3
 800223c:	400a      	ands	r2, r1
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x2c0>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_GPIO_Init+0x2cc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	025b      	lsls	r3, r3, #9
 800226e:	4013      	ands	r3, r2
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800227a:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_GPIO_Init+0x2cc>)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_GPIO_Init+0x2cc>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43da      	mvns	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	4013      	ands	r3, r2
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43da      	mvns	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	035b      	lsls	r3, r3, #13
 80022c2:	4013      	ands	r3, r2
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43da      	mvns	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	039b      	lsls	r3, r3, #14
 80022ec:	4013      	ands	r3, r2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_GPIO_Init+0x2cc>)
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	40da      	lsrs	r2, r3
 800230c:	1e13      	subs	r3, r2, #0
 800230e:	d000      	beq.n	8002312 <HAL_GPIO_Init+0x2b2>
 8002310:	e6ae      	b.n	8002070 <HAL_GPIO_Init+0x10>
  } 
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b006      	add	sp, #24
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000800 	.word	0x48000800
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	000a      	movs	r2, r1
 800233a:	1cbb      	adds	r3, r7, #2
 800233c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	1cba      	adds	r2, r7, #2
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	4013      	ands	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800234a:	230f      	movs	r3, #15
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e003      	b.n	800235c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002354:	230f      	movs	r3, #15
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
  }
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	0008      	movs	r0, r1
 8002374:	0011      	movs	r1, r2
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	1c02      	adds	r2, r0, #0
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	1c7b      	adds	r3, r7, #1
 800237e:	1c0a      	adds	r2, r1, #0
 8002380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002382:	1c7b      	adds	r3, r7, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	1cbb      	adds	r3, r7, #2
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002392:	e003      	b.n	800239c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002394:	1cbb      	adds	r3, r7, #2
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	000a      	movs	r2, r1
 80023ae:	1cbb      	adds	r3, r7, #2
 80023b0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b8:	1cbb      	adds	r3, r7, #2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	1cb9      	adds	r1, r7, #2
 80023c8:	8809      	ldrh	r1, [r1, #0]
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e301      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d100      	bne.n	80023fa <HAL_RCC_OscConfig+0x1e>
 80023f8:	e08d      	b.n	8002516 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023fa:	4bc3      	ldr	r3, [pc, #780]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	220c      	movs	r2, #12
 8002400:	4013      	ands	r3, r2
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00e      	beq.n	8002424 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002406:	4bc0      	ldr	r3, [pc, #768]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	220c      	movs	r2, #12
 800240c:	4013      	ands	r3, r2
 800240e:	2b08      	cmp	r3, #8
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x64>
 8002412:	4bbd      	ldr	r3, [pc, #756]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	401a      	ands	r2, r3
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	025b      	lsls	r3, r3, #9
 8002420:	429a      	cmp	r2, r3
 8002422:	d10d      	bne.n	8002440 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4bb8      	ldr	r3, [pc, #736]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	4013      	ands	r3, r2
 800242e:	d100      	bne.n	8002432 <HAL_RCC_OscConfig+0x56>
 8002430:	e070      	b.n	8002514 <HAL_RCC_OscConfig+0x138>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <HAL_RCC_OscConfig+0x60>
 800243a:	e06b      	b.n	8002514 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2d8      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x7c>
 8002448:	4baf      	ldr	r3, [pc, #700]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4bae      	ldr	r3, [pc, #696]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0249      	lsls	r1, r1, #9
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e02f      	b.n	80024b8 <HAL_RCC_OscConfig+0xdc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x9e>
 8002460:	4ba9      	ldr	r3, [pc, #676]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4ba8      	ldr	r3, [pc, #672]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002466:	49a9      	ldr	r1, [pc, #676]	; (800270c <HAL_RCC_OscConfig+0x330>)
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4ba6      	ldr	r3, [pc, #664]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4ba5      	ldr	r3, [pc, #660]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002472:	49a7      	ldr	r1, [pc, #668]	; (8002710 <HAL_RCC_OscConfig+0x334>)
 8002474:	400a      	ands	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e01e      	b.n	80024b8 <HAL_RCC_OscConfig+0xdc>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10e      	bne.n	80024a0 <HAL_RCC_OscConfig+0xc4>
 8002482:	4ba1      	ldr	r3, [pc, #644]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4ba0      	ldr	r3, [pc, #640]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	02c9      	lsls	r1, r1, #11
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	4b9d      	ldr	r3, [pc, #628]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b9c      	ldr	r3, [pc, #624]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0249      	lsls	r1, r1, #9
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xdc>
 80024a0:	4b99      	ldr	r3, [pc, #612]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b98      	ldr	r3, [pc, #608]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	4999      	ldr	r1, [pc, #612]	; (800270c <HAL_RCC_OscConfig+0x330>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	4b96      	ldr	r3, [pc, #600]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b95      	ldr	r3, [pc, #596]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	4997      	ldr	r1, [pc, #604]	; (8002710 <HAL_RCC_OscConfig+0x334>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d014      	beq.n	80024ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fed0 	bl	8001264 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ca:	f7fe fecb 	bl	8001264 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e28a      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0xee>
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe febb 	bl	8001264 <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe feb6 	bl	8001264 <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e275      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	029b      	lsls	r3, r3, #10
 800250e:	4013      	ands	r3, r2
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x118>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d100      	bne.n	8002522 <HAL_RCC_OscConfig+0x146>
 8002520:	e069      	b.n	80025f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002522:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	220c      	movs	r2, #12
 8002528:	4013      	ands	r3, r2
 800252a:	d00b      	beq.n	8002544 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800252c:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	220c      	movs	r2, #12
 8002532:	4013      	ands	r3, r2
 8002534:	2b08      	cmp	r3, #8
 8002536:	d11c      	bne.n	8002572 <HAL_RCC_OscConfig+0x196>
 8002538:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	4013      	ands	r3, r2
 8002542:	d116      	bne.n	8002572 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002544:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x17e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e24b      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	22f8      	movs	r2, #248	; 0xf8
 8002560:	4393      	bics	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00da      	lsls	r2, r3, #3
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002570:	e041      	b.n	80025f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d024      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b62      	ldr	r3, [pc, #392]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fe6d 	bl	8001264 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fe68 	bl	8001264 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e227      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f1      	beq.n	8002590 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	22f8      	movs	r2, #248	; 0xf8
 80025b2:	4393      	bics	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00da      	lsls	r2, r3, #3
 80025bc:	4b52      	ldr	r3, [pc, #328]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e018      	b.n	80025f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fe48 	bl	8001264 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fe43 	bl	8001264 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e202      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f1      	bne.n	80025da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2208      	movs	r2, #8
 80025fc:	4013      	ands	r3, r2
 80025fe:	d036      	beq.n	800266e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d019      	beq.n	800263c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800260a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fe fe26 	bl	8001264 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe fe21 	bl	8001264 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1e0      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2202      	movs	r2, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d0f1      	beq.n	800261e <HAL_RCC_OscConfig+0x242>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b32      	ldr	r3, [pc, #200]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002642:	2101      	movs	r1, #1
 8002644:	438a      	bics	r2, r1
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7fe fe0c 	bl	8001264 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe fe07 	bl	8001264 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1c6      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2202      	movs	r2, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d1f1      	bne.n	8002652 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d100      	bne.n	800267a <HAL_RCC_OscConfig+0x29e>
 8002678:	e0b4      	b.n	80027e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	201f      	movs	r0, #31
 800267c:	183b      	adds	r3, r7, r0
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	055b      	lsls	r3, r3, #21
 800268a:	4013      	ands	r3, r2
 800268c:	d110      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0549      	lsls	r1, r1, #21
 8002698:	430a      	orrs	r2, r1
 800269a:	61da      	str	r2, [r3, #28]
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	055b      	lsls	r3, r3, #21
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d11a      	bne.n	80026f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x338>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_RCC_OscConfig+0x338>)
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	0049      	lsls	r1, r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fdcb 	bl	8001264 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fdc6 	bl	8001264 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e185      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x338>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10e      	bne.n	8002718 <HAL_RCC_OscConfig+0x33c>
 80026fa:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	4b02      	ldr	r3, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0x32c>)
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	e035      	b.n	8002774 <HAL_RCC_OscConfig+0x398>
 8002708:	40021000 	.word	0x40021000
 800270c:	fffeffff 	.word	0xfffeffff
 8002710:	fffbffff 	.word	0xfffbffff
 8002714:	40007000 	.word	0x40007000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x35e>
 8002720:	4bb6      	ldr	r3, [pc, #728]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4bb5      	ldr	r3, [pc, #724]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	4bb3      	ldr	r3, [pc, #716]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4bb2      	ldr	r3, [pc, #712]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002732:	2104      	movs	r1, #4
 8002734:	438a      	bics	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x398>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x380>
 8002742:	4bae      	ldr	r3, [pc, #696]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4bad      	ldr	r3, [pc, #692]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002748:	2104      	movs	r1, #4
 800274a:	430a      	orrs	r2, r1
 800274c:	621a      	str	r2, [r3, #32]
 800274e:	4bab      	ldr	r3, [pc, #684]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	4baa      	ldr	r3, [pc, #680]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	621a      	str	r2, [r3, #32]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x398>
 800275c:	4ba7      	ldr	r3, [pc, #668]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	4ba6      	ldr	r3, [pc, #664]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002762:	2101      	movs	r1, #1
 8002764:	438a      	bics	r2, r1
 8002766:	621a      	str	r2, [r3, #32]
 8002768:	4ba4      	ldr	r3, [pc, #656]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	4ba3      	ldr	r3, [pc, #652]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800276e:	2104      	movs	r1, #4
 8002770:	438a      	bics	r2, r1
 8002772:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe fd72 	bl	8001264 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e009      	b.n	800279a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fd6d 	bl	8001264 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4a9b      	ldr	r2, [pc, #620]	; (8002a00 <HAL_RCC_OscConfig+0x624>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e12b      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4b98      	ldr	r3, [pc, #608]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x3aa>
 80027a4:	e013      	b.n	80027ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fd5d 	bl	8001264 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e009      	b.n	80027c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fd58 	bl	8001264 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	4a91      	ldr	r2, [pc, #580]	; (8002a00 <HAL_RCC_OscConfig+0x624>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e116      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4b8d      	ldr	r3, [pc, #564]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ce:	231f      	movs	r3, #31
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	4b87      	ldr	r3, [pc, #540]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80027de:	4989      	ldr	r1, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x628>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2210      	movs	r2, #16
 80027ea:	4013      	ands	r3, r2
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12a      	bne.n	800284c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027f6:	4b81      	ldr	r3, [pc, #516]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fa:	4b80      	ldr	r3, [pc, #512]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80027fc:	2104      	movs	r1, #4
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002802:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe fd29 	bl	8001264 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002818:	f7fe fd24 	bl	8001264 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0e3      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d0f1      	beq.n	8002818 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002834:	4b71      	ldr	r3, [pc, #452]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	22f8      	movs	r2, #248	; 0xf8
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	00da      	lsls	r2, r3, #3
 8002844:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002846:	430a      	orrs	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e034      	b.n	80028b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	3305      	adds	r3, #5
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002854:	4b69      	ldr	r3, [pc, #420]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002860:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	22f8      	movs	r2, #248	; 0xf8
 8002866:	4393      	bics	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	00da      	lsls	r2, r3, #3
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002872:	430a      	orrs	r2, r1
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002878:	4b60      	ldr	r3, [pc, #384]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800287e:	2104      	movs	r1, #4
 8002880:	430a      	orrs	r2, r1
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002884:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002888:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fce8 	bl	8001264 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800289a:	f7fe fce3 	bl	8001264 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0a2      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	d1f1      	bne.n	800289a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d100      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4e4>
 80028be:	e097      	b.n	80029f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	220c      	movs	r2, #12
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d100      	bne.n	80028ce <HAL_RCC_OscConfig+0x4f2>
 80028cc:	e06b      	b.n	80029a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d14c      	bne.n	8002970 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80028dc:	494a      	ldr	r1, [pc, #296]	; (8002a08 <HAL_RCC_OscConfig+0x62c>)
 80028de:	400a      	ands	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fcbf 	bl	8001264 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fcba 	bl	8001264 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e079      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	049b      	lsls	r3, r3, #18
 8002906:	4013      	ands	r3, r2
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	220f      	movs	r2, #15
 8002910:	4393      	bics	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_RCC_OscConfig+0x630>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	431a      	orrs	r2, r3
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b30      	ldr	r3, [pc, #192]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	0449      	lsls	r1, r1, #17
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fc8d 	bl	8001264 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fc88 	bl	8001264 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e047      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	049b      	lsls	r3, r3, #18
 800296a:	4013      	ands	r3, r2
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x574>
 800296e:	e03f      	b.n	80029f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 8002976:	4924      	ldr	r1, [pc, #144]	; (8002a08 <HAL_RCC_OscConfig+0x62c>)
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fc72 	bl	8001264 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fc6d 	bl	8001264 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e02c      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	049b      	lsls	r3, r3, #18
 80029a0:	4013      	ands	r3, r2
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x5aa>
 80029a4:	e024      	b.n	80029f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01f      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_RCC_OscConfig+0x620>)
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	401a      	ands	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10e      	bne.n	80029ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	220f      	movs	r2, #15
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	23f0      	movs	r3, #240	; 0xf0
 80029e0:	039b      	lsls	r3, r3, #14
 80029e2:	401a      	ands	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b008      	add	sp, #32
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40021000 	.word	0x40021000
 8002a00:	00001388 	.word	0x00001388
 8002a04:	efffffff 	.word	0xefffffff
 8002a08:	feffffff 	.word	0xfeffffff
 8002a0c:	ffc2ffff 	.word	0xffc2ffff

08002a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b3      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d911      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4b55      	ldr	r3, [pc, #340]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e09a      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	4013      	ands	r3, r2
 8002a68:	d006      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002a70:	21e0      	movs	r1, #224	; 0xe0
 8002a72:	00c9      	lsls	r1, r1, #3
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	22f0      	movs	r2, #240	; 0xf0
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06e      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	049b      	lsls	r3, r3, #18
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e062      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e05b      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4393      	bics	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fbbc 	bl	8001264 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	e009      	b.n	8002b06 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7fe fbb7 	bl	8001264 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <HAL_RCC_ClockConfig+0x18c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e042      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1ec      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d211      	bcs.n	8002b4a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_RCC_ClockConfig+0x184>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <HAL_RCC_ClockConfig+0x190>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b68:	f000 f820 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6c:	0001      	movs	r1, r0
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x188>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	220f      	movs	r2, #15
 8002b76:	4013      	ands	r3, r2
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x194>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	000a      	movs	r2, r1
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x198>)
 8002b82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fb27 	bl	80011d8 <HAL_InitTick>
  
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	00001388 	.word	0x00001388
 8002ba0:	fffff8ff 	.word	0xfffff8ff
 8002ba4:	080049d4 	.word	0x080049d4
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b08f      	sub	sp, #60	; 0x3c
 8002bb0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002bb2:	2314      	movs	r3, #20
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bba:	c313      	stmia	r3!, {r0, r1, r4}
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bc6:	c313      	stmia	r3!, {r0, r1, r4}
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002be0:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	220c      	movs	r2, #12
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d002      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x4a>
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d003      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x50>
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bfa:	e02d      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	220f      	movs	r2, #15
 8002c02:	4013      	ands	r3, r2
 8002c04:	2214      	movs	r2, #20
 8002c06:	18ba      	adds	r2, r7, r2
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	220f      	movs	r2, #15
 8002c12:	4013      	ands	r3, r2
 8002c14:	1d3a      	adds	r2, r7, #4
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c26:	4812      	ldr	r0, [pc, #72]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c28:	f7fd fa6e 	bl	8000108 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	001a      	movs	r2, r3
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	4353      	muls	r3, r2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
 8002c36:	e009      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	0152      	lsls	r2, r2, #5
 8002c3e:	1a52      	subs	r2, r2, r1
 8002c40:	0193      	lsls	r3, r2, #6
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b00f      	add	sp, #60	; 0x3c
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	080047b4 	.word	0x080047b4
 8002c68:	080047c4 	.word	0x080047c4
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b02      	ldr	r3, [pc, #8]	; (8002c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	2000000c 	.word	0x2000000c

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c8c:	f7ff fff2 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c90:	0001      	movs	r1, r0
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	2207      	movs	r2, #7
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	40d9      	lsrs	r1, r3
 8002ca2:	000b      	movs	r3, r1
}    
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	080049e4 	.word	0x080049e4

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cd0:	e08e      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2017      	movs	r0, #23
 8002cd4:	183b      	adds	r3, r7, r0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	055b      	lsls	r3, r3, #21
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d110      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0549      	lsls	r1, r1, #21
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fa9f 	bl	8001264 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fa9a 	bl	8001264 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e077      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d034      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0249      	lsls	r1, r1, #9
 8002d80:	430a      	orrs	r2, r1
 8002d82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d8a:	492e      	ldr	r1, [pc, #184]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fa61 	bl	8001264 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fa5c 	bl	8001264 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e038      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dda:	2317      	movs	r3, #23
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dea:	4918      	ldr	r1, [pc, #96]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	2203      	movs	r2, #3
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2220      	movs	r2, #32
 8002e14:	4013      	ands	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	fffffcff 	.word	0xfffffcff
 8002e44:	fffeffff 	.word	0xfffeffff
 8002e48:	00001388 	.word	0x00001388
 8002e4c:	efffffff 	.word	0xefffffff

08002e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e042      	b.n	8002ee8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	223d      	movs	r2, #61	; 0x3d
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223c      	movs	r2, #60	; 0x3c
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fe f849 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223d      	movs	r2, #61	; 0x3d
 8002e82:	2102      	movs	r1, #2
 8002e84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	0019      	movs	r1, r3
 8002e90:	0010      	movs	r0, r2
 8002e92:	f000 f9e5 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2246      	movs	r2, #70	; 0x46
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	223e      	movs	r2, #62	; 0x3e
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	223f      	movs	r2, #63	; 0x3f
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2241      	movs	r2, #65	; 0x41
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2242      	movs	r2, #66	; 0x42
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2243      	movs	r2, #67	; 0x43
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5499      	strb	r1, [r3, r2]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2244      	movs	r2, #68	; 0x44
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2245      	movs	r2, #69	; 0x45
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	223d      	movs	r2, #61	; 0x3d
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	223d      	movs	r2, #61	; 0x3d
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e036      	b.n	8002f76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223d      	movs	r2, #61	; 0x3d
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <HAL_TIM_Base_Start_IT+0x90>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00a      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x50>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d004      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x50>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIM_Base_Start_IT+0x94>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d111      	bne.n	8002f64 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2207      	movs	r2, #7
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d010      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f62:	e007      	b.n	8002f74 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_TIM_Base_Stop_IT+0x54>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d10d      	bne.n	8002fc8 <HAL_TIM_Base_Stop_IT+0x40>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <HAL_TIM_Base_Stop_IT+0x58>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_Base_Stop_IT+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	223d      	movs	r2, #61	; 0x3d
 8002fcc:	2101      	movs	r1, #1
 8002fce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	00001111 	.word	0x00001111
 8002fe0:	00000444 	.word	0x00000444

08002fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d124      	bne.n	8003044 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	4013      	ands	r3, r2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11d      	bne.n	8003044 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2203      	movs	r2, #3
 800300e:	4252      	negs	r2, r2
 8003010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2203      	movs	r2, #3
 8003020:	4013      	ands	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f902 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 800302c:	e007      	b.n	800303e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f8f5 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f901 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	2b04      	cmp	r3, #4
 8003050:	d125      	bne.n	800309e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2204      	movs	r2, #4
 800305a:	4013      	ands	r3, r2
 800305c:	2b04      	cmp	r3, #4
 800305e:	d11e      	bne.n	800309e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2205      	movs	r2, #5
 8003066:	4252      	negs	r2, r2
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	23c0      	movs	r3, #192	; 0xc0
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4013      	ands	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f8d5 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8003086:	e007      	b.n	8003098 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f8c8 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f8d4 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2208      	movs	r2, #8
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d124      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2208      	movs	r2, #8
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11d      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2209      	movs	r2, #9
 80030c0:	4252      	negs	r2, r2
 80030c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2204      	movs	r2, #4
 80030c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2203      	movs	r2, #3
 80030d2:	4013      	ands	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 f8a9 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 80030de:	e007      	b.n	80030f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f89c 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f8a8 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2210      	movs	r2, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	2b10      	cmp	r3, #16
 8003102:	d125      	bne.n	8003150 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2210      	movs	r2, #16
 800310c:	4013      	ands	r3, r2
 800310e:	2b10      	cmp	r3, #16
 8003110:	d11e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2211      	movs	r2, #17
 8003118:	4252      	negs	r2, r2
 800311a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2208      	movs	r2, #8
 8003120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	23c0      	movs	r3, #192	; 0xc0
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4013      	ands	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f87c 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8003138:	e007      	b.n	800314a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 f86f 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 f87b 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10f      	bne.n	800317e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2202      	movs	r2, #2
 8003172:	4252      	negs	r2, r2
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f849 	bl	8003210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	4013      	ands	r3, r2
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d10f      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	4013      	ands	r3, r2
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d108      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2281      	movs	r2, #129	; 0x81
 80031a0:	4252      	negs	r2, r2
 80031a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 f8d8 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2240      	movs	r2, #64	; 0x40
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d10f      	bne.n	80031da <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d108      	bne.n	80031da <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2241      	movs	r2, #65	; 0x41
 80031ce:	4252      	negs	r2, r2
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 f83b 	bl	8003250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2220      	movs	r2, #32
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d10f      	bne.n	8003208 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d108      	bne.n	8003208 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2221      	movs	r2, #33	; 0x21
 80031fc:	4252      	negs	r2, r2
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f8a2 	bl	800334c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a30      	ldr	r2, [pc, #192]	; (8003334 <TIM_Base_SetConfig+0xd4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d008      	beq.n	800328a <TIM_Base_SetConfig+0x2a>
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	05db      	lsls	r3, r3, #23
 800327e:	429a      	cmp	r2, r3
 8003280:	d003      	beq.n	800328a <TIM_Base_SetConfig+0x2a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2c      	ldr	r2, [pc, #176]	; (8003338 <TIM_Base_SetConfig+0xd8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d108      	bne.n	800329c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2270      	movs	r2, #112	; 0x70
 800328e:	4393      	bics	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d014      	beq.n	80032ce <TIM_Base_SetConfig+0x6e>
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0x6e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a21      	ldr	r2, [pc, #132]	; (8003338 <TIM_Base_SetConfig+0xd8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0x6e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <TIM_Base_SetConfig+0xdc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0x6e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <TIM_Base_SetConfig+0xe0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0x6e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <TIM_Base_SetConfig+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <TIM_Base_SetConfig+0xe8>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	4393      	bics	r3, r2
 80032e6:	001a      	movs	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <TIM_Base_SetConfig+0xd4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0xbe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <TIM_Base_SetConfig+0xe0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0xbe>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <TIM_Base_SetConfig+0xe4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d103      	bne.n	8003326 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	615a      	str	r2, [r3, #20]
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40000400 	.word	0x40000400
 800333c:	40002000 	.word	0x40002000
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800
 8003348:	fffffcff 	.word	0xfffffcff

0800334c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e044      	b.n	8003408 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2274      	movs	r2, #116	; 0x74
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f7fd fe21 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2224      	movs	r2, #36	; 0x24
 800339a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fc2e 	bl	8003c10 <UART_SetConfig>
 80033b4:	0003      	movs	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e024      	b.n	8003408 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fd4b 	bl	8003e64 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	490d      	ldr	r1, [pc, #52]	; (8003410 <HAL_UART_Init+0xa4>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	212a      	movs	r1, #42	; 0x2a
 80033ea:	438a      	bics	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fde3 	bl	8003fcc <UART_CheckIdleState>
 8003406:	0003      	movs	r3, r0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	ffffb7ff 	.word	0xffffb7ff

08003414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	2b20      	cmp	r3, #32
 800342a:	d000      	beq.n	800342e <HAL_UART_Transmit+0x1a>
 800342c:	e096      	b.n	800355c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_UART_Transmit+0x28>
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e08e      	b.n	800355e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	015b      	lsls	r3, r3, #5
 8003448:	429a      	cmp	r2, r3
 800344a:	d109      	bne.n	8003460 <HAL_UART_Transmit+0x4c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e07e      	b.n	800355e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2274      	movs	r2, #116	; 0x74
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Transmit+0x5a>
 800346a:	2302      	movs	r3, #2
 800346c:	e077      	b.n	800355e <HAL_UART_Transmit+0x14a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2274      	movs	r2, #116	; 0x74
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	2100      	movs	r1, #0
 800347c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003484:	f7fd feee 	bl	8001264 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1dba      	adds	r2, r7, #6
 8003490:	2150      	movs	r1, #80	; 0x50
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1dba      	adds	r2, r7, #6
 800349a:	2152      	movs	r1, #82	; 0x52
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d108      	bne.n	80034be <HAL_UART_Transmit+0xaa>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e003      	b.n	80034c6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2274      	movs	r2, #116	; 0x74
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80034ce:	e02d      	b.n	800352c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	0013      	movs	r3, r2
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	f000 fdbd 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e039      	b.n	800355e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	05d2      	lsls	r2, r2, #23
 80034fa:	0dd2      	lsrs	r2, r2, #23
 80034fc:	b292      	uxth	r2, r2
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	3302      	adds	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e008      	b.n	800351a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b292      	uxth	r2, r2
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3301      	adds	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2252      	movs	r2, #82	; 0x52
 800351e:	5a9b      	ldrh	r3, [r3, r2]
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b299      	uxth	r1, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2252      	movs	r2, #82	; 0x52
 800352a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2252      	movs	r2, #82	; 0x52
 8003530:	5a9b      	ldrh	r3, [r3, r2]
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1cb      	bne.n	80034d0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0013      	movs	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	f000 fd89 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e005      	b.n	800355e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b008      	add	sp, #32
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b088      	sub	sp, #32
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003578:	2b20      	cmp	r3, #32
 800357a:	d150      	bne.n	800361e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_Receive_IT+0x24>
 8003582:	1dbb      	adds	r3, r7, #6
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e048      	b.n	8003620 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d109      	bne.n	80035ae <HAL_UART_Receive_IT+0x48>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	d001      	beq.n	80035ae <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e038      	b.n	8003620 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2274      	movs	r2, #116	; 0x74
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Receive_IT+0x56>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e031      	b.n	8003620 <HAL_UART_Receive_IT+0xba>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2274      	movs	r2, #116	; 0x74
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	d019      	beq.n	800360c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d8:	f3ef 8310 	mrs	r3, PRIMASK
 80035dc:	613b      	str	r3, [r7, #16]
  return(result);
 80035de:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2301      	movs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	04c9      	lsls	r1, r1, #19
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 fde5 	bl	80041e4 <UART_Start_Receive_IT>
 800361a:	0003      	movs	r3, r0
 800361c:	e000      	b.n	8003620 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b008      	add	sp, #32
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b0ab      	sub	sp, #172	; 0xac
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	22a4      	movs	r2, #164	; 0xa4
 8003638:	18b9      	adds	r1, r7, r2
 800363a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	20a0      	movs	r0, #160	; 0xa0
 8003644:	1839      	adds	r1, r7, r0
 8003646:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	219c      	movs	r1, #156	; 0x9c
 8003650:	1879      	adds	r1, r7, r1
 8003652:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003654:	0011      	movs	r1, r2
 8003656:	18bb      	adds	r3, r7, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a99      	ldr	r2, [pc, #612]	; (80038c0 <HAL_UART_IRQHandler+0x298>)
 800365c:	4013      	ands	r3, r2
 800365e:	2298      	movs	r2, #152	; 0x98
 8003660:	18bc      	adds	r4, r7, r2
 8003662:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003664:	18bb      	adds	r3, r7, r2
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d114      	bne.n	8003696 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800366c:	187b      	adds	r3, r7, r1
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2220      	movs	r2, #32
 8003672:	4013      	ands	r3, r2
 8003674:	d00f      	beq.n	8003696 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003676:	183b      	adds	r3, r7, r0
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	4013      	ands	r3, r2
 800367e:	d00a      	beq.n	8003696 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003684:	2b00      	cmp	r3, #0
 8003686:	d100      	bne.n	800368a <HAL_UART_IRQHandler+0x62>
 8003688:	e296      	b.n	8003bb8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	0010      	movs	r0, r2
 8003692:	4798      	blx	r3
      }
      return;
 8003694:	e290      	b.n	8003bb8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003696:	2398      	movs	r3, #152	; 0x98
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d100      	bne.n	80036a2 <HAL_UART_IRQHandler+0x7a>
 80036a0:	e114      	b.n	80038cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036a2:	239c      	movs	r3, #156	; 0x9c
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	d106      	bne.n	80036bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036ae:	23a0      	movs	r3, #160	; 0xa0
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a83      	ldr	r2, [pc, #524]	; (80038c4 <HAL_UART_IRQHandler+0x29c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	d100      	bne.n	80036bc <HAL_UART_IRQHandler+0x94>
 80036ba:	e107      	b.n	80038cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036bc:	23a4      	movs	r3, #164	; 0xa4
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d012      	beq.n	80036ee <HAL_UART_IRQHandler+0xc6>
 80036c8:	23a0      	movs	r3, #160	; 0xa0
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	589b      	ldr	r3, [r3, r2]
 80036e4:	2201      	movs	r2, #1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036ee:	23a4      	movs	r3, #164	; 0xa4
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2202      	movs	r2, #2
 80036f6:	4013      	ands	r3, r2
 80036f8:	d011      	beq.n	800371e <HAL_UART_IRQHandler+0xf6>
 80036fa:	239c      	movs	r3, #156	; 0x9c
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2202      	movs	r2, #2
 800370c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	589b      	ldr	r3, [r3, r2]
 8003714:	2204      	movs	r2, #4
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800371e:	23a4      	movs	r3, #164	; 0xa4
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	4013      	ands	r3, r2
 8003728:	d011      	beq.n	800374e <HAL_UART_IRQHandler+0x126>
 800372a:	239c      	movs	r3, #156	; 0x9c
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d00b      	beq.n	800374e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2204      	movs	r2, #4
 800373c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	589b      	ldr	r3, [r3, r2]
 8003744:	2202      	movs	r2, #2
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800374e:	23a4      	movs	r3, #164	; 0xa4
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2208      	movs	r2, #8
 8003756:	4013      	ands	r3, r2
 8003758:	d017      	beq.n	800378a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800375a:	23a0      	movs	r3, #160	; 0xa0
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2220      	movs	r2, #32
 8003762:	4013      	ands	r3, r2
 8003764:	d105      	bne.n	8003772 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003766:	239c      	movs	r3, #156	; 0x9c
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2208      	movs	r2, #8
 8003778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	589b      	ldr	r3, [r3, r2]
 8003780:	2208      	movs	r2, #8
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800378a:	23a4      	movs	r3, #164	; 0xa4
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4013      	ands	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_UART_IRQHandler+0x198>
 8003798:	23a0      	movs	r3, #160	; 0xa0
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	04db      	lsls	r3, r3, #19
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00c      	beq.n	80037c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	589b      	ldr	r3, [r3, r2]
 80037b6:	2220      	movs	r2, #32
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	589b      	ldr	r3, [r3, r2]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <HAL_UART_IRQHandler+0x1a4>
 80037ca:	e1f7      	b.n	8003bbc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037cc:	23a4      	movs	r3, #164	; 0xa4
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	4013      	ands	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037d8:	23a0      	movs	r3, #160	; 0xa0
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2220      	movs	r2, #32
 80037e0:	4013      	ands	r3, r2
 80037e2:	d008      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	0010      	movs	r0, r2
 80037f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	589b      	ldr	r3, [r3, r2]
 80037fc:	2194      	movs	r1, #148	; 0x94
 80037fe:	187a      	adds	r2, r7, r1
 8003800:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2240      	movs	r2, #64	; 0x40
 800380a:	4013      	ands	r3, r2
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d004      	beq.n	800381a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003810:	187b      	adds	r3, r7, r1
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2228      	movs	r2, #40	; 0x28
 8003816:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003818:	d047      	beq.n	80038aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fd7d 	bl	800431c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	4013      	ands	r3, r2
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d137      	bne.n	80038a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003830:	f3ef 8310 	mrs	r3, PRIMASK
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003838:	2090      	movs	r0, #144	; 0x90
 800383a:	183a      	adds	r2, r7, r0
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	2301      	movs	r3, #1
 8003840:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	438a      	bics	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	183b      	adds	r3, r7, r0
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_UART_IRQHandler+0x2a0>)
 8003876:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	0018      	movs	r0, r3
 800387e:	f7fe fba9 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d01a      	beq.n	80038bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	0018      	movs	r0, r3
 8003892:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e012      	b.n	80038bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f9a5 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	e00d      	b.n	80038bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f9a0 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	e008      	b.n	80038bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 f99b 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	2100      	movs	r1, #0
 80038b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038ba:	e17f      	b.n	8003bbc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	46c0      	nop			; (mov r8, r8)
    return;
 80038be:	e17d      	b.n	8003bbc <HAL_UART_IRQHandler+0x594>
 80038c0:	0000080f 	.word	0x0000080f
 80038c4:	04000120 	.word	0x04000120
 80038c8:	080043e1 	.word	0x080043e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d000      	beq.n	80038d6 <HAL_UART_IRQHandler+0x2ae>
 80038d4:	e131      	b.n	8003b3a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038d6:	23a4      	movs	r3, #164	; 0xa4
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	4013      	ands	r3, r2
 80038e0:	d100      	bne.n	80038e4 <HAL_UART_IRQHandler+0x2bc>
 80038e2:	e12a      	b.n	8003b3a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038e4:	23a0      	movs	r3, #160	; 0xa0
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2210      	movs	r2, #16
 80038ec:	4013      	ands	r3, r2
 80038ee:	d100      	bne.n	80038f2 <HAL_UART_IRQHandler+0x2ca>
 80038f0:	e123      	b.n	8003b3a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	4013      	ands	r3, r2
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d000      	beq.n	800390a <HAL_UART_IRQHandler+0x2e2>
 8003908:	e09b      	b.n	8003a42 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	217e      	movs	r1, #126	; 0x7e
 8003914:	187b      	adds	r3, r7, r1
 8003916:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003918:	187b      	adds	r3, r7, r1
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d100      	bne.n	8003922 <HAL_UART_IRQHandler+0x2fa>
 8003920:	e14e      	b.n	8003bc0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2258      	movs	r2, #88	; 0x58
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	187a      	adds	r2, r7, r1
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d300      	bcc.n	8003932 <HAL_UART_IRQHandler+0x30a>
 8003930:	e146      	b.n	8003bc0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	187a      	adds	r2, r7, r1
 8003936:	215a      	movs	r1, #90	; 0x5a
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d06e      	beq.n	8003a24 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800394e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003950:	2301      	movs	r3, #1
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	499a      	ldr	r1, [pc, #616]	; (8003bd0 <HAL_UART_IRQHandler+0x5a8>)
 8003968:	400a      	ands	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	677b      	str	r3, [r7, #116]	; 0x74
 8003982:	2301      	movs	r3, #1
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039aa:	f3ef 8310 	mrs	r3, PRIMASK
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b2:	673b      	str	r3, [r7, #112]	; 0x70
 80039b4:	2301      	movs	r3, #1
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2140      	movs	r1, #64	; 0x40
 80039cc:	438a      	bics	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80039ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f2:	2301      	movs	r3, #1
 80039f4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2110      	movs	r1, #16
 8003a0a:	438a      	bics	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fe faa0 	bl	8001f64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2258      	movs	r2, #88	; 0x58
 8003a28:	5a9a      	ldrh	r2, [r3, r2]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	215a      	movs	r1, #90	; 0x5a
 8003a2e:	5a5b      	ldrh	r3, [r3, r1]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0011      	movs	r1, r2
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f8dc 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a40:	e0be      	b.n	8003bc0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2258      	movs	r2, #88	; 0x58
 8003a46:	5a99      	ldrh	r1, [r3, r2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	225a      	movs	r2, #90	; 0x5a
 8003a4c:	5a9b      	ldrh	r3, [r3, r2]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	208e      	movs	r0, #142	; 0x8e
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	1a8a      	subs	r2, r1, r2
 8003a56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	225a      	movs	r2, #90	; 0x5a
 8003a5c:	5a9b      	ldrh	r3, [r3, r2]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d100      	bne.n	8003a66 <HAL_UART_IRQHandler+0x43e>
 8003a64:	e0ae      	b.n	8003bc4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <HAL_UART_IRQHandler+0x448>
 8003a6e:	e0a9      	b.n	8003bc4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a78:	2488      	movs	r4, #136	; 0x88
 8003a7a:	193a      	adds	r2, r7, r4
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	494f      	ldr	r1, [pc, #316]	; (8003bd4 <HAL_UART_IRQHandler+0x5ac>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aac:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	2484      	movs	r4, #132	; 0x84
 8003ab2:	193a      	adds	r2, r7, r4
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	438a      	bics	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af2:	f3ef 8310 	mrs	r3, PRIMASK
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	2480      	movs	r4, #128	; 0x80
 8003afc:	193a      	adds	r2, r7, r4
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	2301      	movs	r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2110      	movs	r1, #16
 8003b18:	438a      	bics	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	193b      	adds	r3, r7, r4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f860 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b38:	e044      	b.n	8003bc4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b3a:	23a4      	movs	r3, #164	; 0xa4
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	035b      	lsls	r3, r3, #13
 8003b44:	4013      	ands	r3, r2
 8003b46:	d010      	beq.n	8003b6a <HAL_UART_IRQHandler+0x542>
 8003b48:	239c      	movs	r3, #156	; 0x9c
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	03db      	lsls	r3, r3, #15
 8003b52:	4013      	ands	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	0352      	lsls	r2, r2, #13
 8003b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 fde6 	bl	8004734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b68:	e02f      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b6a:	23a4      	movs	r3, #164	; 0xa4
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	4013      	ands	r3, r2
 8003b74:	d00f      	beq.n	8003b96 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b76:	23a0      	movs	r3, #160	; 0xa0
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2280      	movs	r2, #128	; 0x80
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01e      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	0010      	movs	r0, r2
 8003b92:	4798      	blx	r3
    }
    return;
 8003b94:	e018      	b.n	8003bc8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b96:	23a4      	movs	r3, #164	; 0xa4
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2240      	movs	r2, #64	; 0x40
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_UART_IRQHandler+0x5a2>
 8003ba2:	23a0      	movs	r3, #160	; 0xa0
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00d      	beq.n	8003bca <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fc2c 	bl	800440e <UART_EndTransmit_IT>
    return;
 8003bb6:	e008      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
      return;
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	e006      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
    return;
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	e004      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
      return;
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	e002      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
      return;
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	e000      	b.n	8003bca <HAL_UART_IRQHandler+0x5a2>
    return;
 8003bc8:	46c0      	nop			; (mov r8, r8)
  }

}
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b02b      	add	sp, #172	; 0xac
 8003bce:	bd90      	pop	{r4, r7, pc}
 8003bd0:	fffffeff 	.word	0xfffffeff
 8003bd4:	fffffedf 	.word	0xfffffedf

08003bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	000a      	movs	r2, r1
 8003c02:	1cbb      	adds	r3, r7, #2
 8003c04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c18:	231e      	movs	r3, #30
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a84      	ldr	r2, [pc, #528]	; (8003e50 <UART_SetConfig+0x240>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a7f      	ldr	r2, [pc, #508]	; (8003e54 <UART_SetConfig+0x244>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a76      	ldr	r2, [pc, #472]	; (8003e58 <UART_SetConfig+0x248>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8c:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <UART_SetConfig+0x24c>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	2203      	movs	r2, #3
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d00d      	beq.n	8003cb4 <UART_SetConfig+0xa4>
 8003c98:	d81b      	bhi.n	8003cd2 <UART_SetConfig+0xc2>
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d014      	beq.n	8003cc8 <UART_SetConfig+0xb8>
 8003c9e:	d818      	bhi.n	8003cd2 <UART_SetConfig+0xc2>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <UART_SetConfig+0x9a>
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d00a      	beq.n	8003cbe <UART_SetConfig+0xae>
 8003ca8:	e013      	b.n	8003cd2 <UART_SetConfig+0xc2>
 8003caa:	231f      	movs	r3, #31
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e012      	b.n	8003cda <UART_SetConfig+0xca>
 8003cb4:	231f      	movs	r3, #31
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2202      	movs	r2, #2
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e00d      	b.n	8003cda <UART_SetConfig+0xca>
 8003cbe:	231f      	movs	r3, #31
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e008      	b.n	8003cda <UART_SetConfig+0xca>
 8003cc8:	231f      	movs	r3, #31
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2208      	movs	r2, #8
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e003      	b.n	8003cda <UART_SetConfig+0xca>
 8003cd2:	231f      	movs	r3, #31
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d15d      	bne.n	8003da4 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003ce8:	231f      	movs	r3, #31
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d015      	beq.n	8003d1e <UART_SetConfig+0x10e>
 8003cf2:	dc18      	bgt.n	8003d26 <UART_SetConfig+0x116>
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00d      	beq.n	8003d14 <UART_SetConfig+0x104>
 8003cf8:	dc15      	bgt.n	8003d26 <UART_SetConfig+0x116>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <UART_SetConfig+0xf4>
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d005      	beq.n	8003d0e <UART_SetConfig+0xfe>
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe ffc0 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e012      	b.n	8003d34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0e:	4b54      	ldr	r3, [pc, #336]	; (8003e60 <UART_SetConfig+0x250>)
 8003d10:	61bb      	str	r3, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d14:	f7fe ff4a 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	61bb      	str	r3, [r7, #24]
        break;
 8003d1c:	e00a      	b.n	8003d34 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	61bb      	str	r3, [r7, #24]
        break;
 8003d24:	e006      	b.n	8003d34 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2a:	231e      	movs	r3, #30
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
        break;
 8003d32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d100      	bne.n	8003d3c <UART_SetConfig+0x12c>
 8003d3a:	e07b      	b.n	8003e34 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	005a      	lsls	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	18d2      	adds	r2, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	0010      	movs	r0, r2
 8003d50:	f7fc f9da 	bl	8000108 <__udivsi3>
 8003d54:	0003      	movs	r3, r0
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b0f      	cmp	r3, #15
 8003d5e:	d91c      	bls.n	8003d9a <UART_SetConfig+0x18a>
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	025b      	lsls	r3, r3, #9
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d217      	bcs.n	8003d9a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	200e      	movs	r0, #14
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	210f      	movs	r1, #15
 8003d74:	438a      	bics	r2, r1
 8003d76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2207      	movs	r2, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	b299      	uxth	r1, r3
 8003d84:	183b      	adds	r3, r7, r0
 8003d86:	183a      	adds	r2, r7, r0
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	183a      	adds	r2, r7, r0
 8003d94:	8812      	ldrh	r2, [r2, #0]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	e04c      	b.n	8003e34 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9a:	231e      	movs	r3, #30
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e047      	b.n	8003e34 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da4:	231f      	movs	r3, #31
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d015      	beq.n	8003dda <UART_SetConfig+0x1ca>
 8003dae:	dc18      	bgt.n	8003de2 <UART_SetConfig+0x1d2>
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00d      	beq.n	8003dd0 <UART_SetConfig+0x1c0>
 8003db4:	dc15      	bgt.n	8003de2 <UART_SetConfig+0x1d2>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <UART_SetConfig+0x1b0>
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d005      	beq.n	8003dca <UART_SetConfig+0x1ba>
 8003dbe:	e010      	b.n	8003de2 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fe ff62 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	61bb      	str	r3, [r7, #24]
        break;
 8003dc8:	e012      	b.n	8003df0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dca:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <UART_SetConfig+0x250>)
 8003dcc:	61bb      	str	r3, [r7, #24]
        break;
 8003dce:	e00f      	b.n	8003df0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd0:	f7fe feec 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	61bb      	str	r3, [r7, #24]
        break;
 8003dd8:	e00a      	b.n	8003df0 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e006      	b.n	8003df0 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de6:	231e      	movs	r3, #30
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
        break;
 8003dee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01e      	beq.n	8003e34 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	085a      	lsrs	r2, r3, #1
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	18d2      	adds	r2, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0019      	movs	r1, r3
 8003e06:	0010      	movs	r0, r2
 8003e08:	f7fc f97e 	bl	8000108 <__udivsi3>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d909      	bls.n	8003e2c <UART_SetConfig+0x21c>
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d204      	bcs.n	8003e2c <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	e003      	b.n	8003e34 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2c:	231e      	movs	r3, #30
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e40:	231e      	movs	r3, #30
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b008      	add	sp, #32
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	ffff69f3 	.word	0xffff69f3
 8003e54:	ffffcfff 	.word	0xffffcfff
 8003e58:	fffff4ff 	.word	0xfffff4ff
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	007a1200 	.word	0x007a1200

08003e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2201      	movs	r2, #1
 8003e72:	4013      	ands	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <UART_AdvFeatureConfig+0x144>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a43      	ldr	r2, [pc, #268]	; (8003fac <UART_AdvFeatureConfig+0x148>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <UART_AdvFeatureConfig+0x14c>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <UART_AdvFeatureConfig+0x150>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2210      	movs	r2, #16
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <UART_AdvFeatureConfig+0x154>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <UART_AdvFeatureConfig+0x158>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2240      	movs	r2, #64	; 0x40
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <UART_AdvFeatureConfig+0x15c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	035b      	lsls	r3, r3, #13
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10b      	bne.n	8003f7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <UART_AdvFeatureConfig+0x160>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	4013      	ands	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <UART_AdvFeatureConfig+0x164>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fffdffff 	.word	0xfffdffff
 8003fac:	fffeffff 	.word	0xfffeffff
 8003fb0:	fffbffff 	.word	0xfffbffff
 8003fb4:	ffff7fff 	.word	0xffff7fff
 8003fb8:	ffffefff 	.word	0xffffefff
 8003fbc:	ffffdfff 	.word	0xffffdfff
 8003fc0:	ffefffff 	.word	0xffefffff
 8003fc4:	ff9fffff 	.word	0xff9fffff
 8003fc8:	fff7ffff 	.word	0xfff7ffff

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fd f942 	bl	8001264 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2208      	movs	r2, #8
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d10c      	bne.n	800400c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	0391      	lsls	r1, r2, #14
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <UART_CheckIdleState+0x8c>)
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f82c 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e021      	b.n	8004050 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2204      	movs	r2, #4
 8004014:	4013      	ands	r3, r2
 8004016:	2b04      	cmp	r3, #4
 8004018:	d10c      	bne.n	8004034 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	03d1      	lsls	r1, r2, #15
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <UART_CheckIdleState+0x8c>)
 8004024:	9200      	str	r2, [sp, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	f000 f818 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d001      	beq.n	8004034 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e00d      	b.n	8004050 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2274      	movs	r2, #116	; 0x74
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b004      	add	sp, #16
 8004056:	bd80      	pop	{r7, pc}
 8004058:	01ffffff 	.word	0x01ffffff

0800405c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b094      	sub	sp, #80	; 0x50
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406c:	e0a3      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004070:	3301      	adds	r3, #1
 8004072:	d100      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004074:	e09f      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7fd f8f5 	bl	8001264 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <UART_WaitOnFlagUntilTimeout+0x30>
 8004086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004088:	2b00      	cmp	r3, #0
 800408a:	d13d      	bne.n	8004108 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8310 	mrs	r3, PRIMASK
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
 8004096:	2301      	movs	r3, #1
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	494c      	ldr	r1, [pc, #304]	; (80041e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040be:	f3ef 8310 	mrs	r3, PRIMASK
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	643b      	str	r3, [r7, #64]	; 0x40
 80040c8:	2301      	movs	r3, #1
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f383 8810 	msr	PRIMASK, r3
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2101      	movs	r1, #1
 80040e0:	438a      	bics	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2274      	movs	r2, #116	; 0x74
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e067      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2204      	movs	r2, #4
 8004110:	4013      	ands	r3, r2
 8004112:	d050      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	401a      	ands	r2, r3
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	429a      	cmp	r2, r3
 8004126:	d146      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	0112      	lsls	r2, r2, #4
 8004130:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004132:	f3ef 8310 	mrs	r3, PRIMASK
 8004136:	613b      	str	r3, [r7, #16]
  return(result);
 8004138:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4923      	ldr	r1, [pc, #140]	; (80041e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004154:	400a      	ands	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004164:	f3ef 8310 	mrs	r3, PRIMASK
 8004168:	61fb      	str	r3, [r7, #28]
  return(result);
 800416a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
 800416e:	2301      	movs	r3, #1
 8004170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f383 8810 	msr	PRIMASK, r3
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	438a      	bics	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	2120      	movs	r1, #32
 80041a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2274      	movs	r2, #116	; 0x74
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e010      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	425a      	negs	r2, r3
 80041c6:	4153      	adcs	r3, r2
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	001a      	movs	r2, r3
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d100      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80041d4:	e74b      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b014      	add	sp, #80	; 0x50
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	fffffe5f 	.word	0xfffffe5f

080041e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	1dbb      	adds	r3, r7, #6
 80041f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1dba      	adds	r2, r7, #6
 80041fc:	2158      	movs	r1, #88	; 0x58
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1dba      	adds	r2, r7, #6
 8004206:	215a      	movs	r1, #90	; 0x5a
 8004208:	8812      	ldrh	r2, [r2, #0]
 800420a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	429a      	cmp	r2, r3
 800421c:	d10d      	bne.n	800423a <UART_Start_Receive_IT+0x56>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <UART_Start_Receive_IT+0x4c>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	225c      	movs	r2, #92	; 0x5c
 800422a:	4939      	ldr	r1, [pc, #228]	; (8004310 <UART_Start_Receive_IT+0x12c>)
 800422c:	5299      	strh	r1, [r3, r2]
 800422e:	e01a      	b.n	8004266 <UART_Start_Receive_IT+0x82>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	225c      	movs	r2, #92	; 0x5c
 8004234:	21ff      	movs	r1, #255	; 0xff
 8004236:	5299      	strh	r1, [r3, r2]
 8004238:	e015      	b.n	8004266 <UART_Start_Receive_IT+0x82>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <UART_Start_Receive_IT+0x7a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <UART_Start_Receive_IT+0x70>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	225c      	movs	r2, #92	; 0x5c
 800424e:	21ff      	movs	r1, #255	; 0xff
 8004250:	5299      	strh	r1, [r3, r2]
 8004252:	e008      	b.n	8004266 <UART_Start_Receive_IT+0x82>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	225c      	movs	r2, #92	; 0x5c
 8004258:	217f      	movs	r1, #127	; 0x7f
 800425a:	5299      	strh	r1, [r3, r2]
 800425c:	e003      	b.n	8004266 <UART_Start_Receive_IT+0x82>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	225c      	movs	r2, #92	; 0x5c
 8004262:	2100      	movs	r1, #0
 8004264:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	2100      	movs	r1, #0
 800426c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2222      	movs	r2, #34	; 0x22
 8004272:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	61fb      	str	r3, [r7, #28]
  return(result);
 800427a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427e:	2301      	movs	r3, #1
 8004280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	015b      	lsls	r3, r3, #5
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d107      	bne.n	80042c2 <UART_Start_Receive_IT+0xde>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <UART_Start_Receive_IT+0x130>)
 80042be:	665a      	str	r2, [r3, #100]	; 0x64
 80042c0:	e002      	b.n	80042c8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <UART_Start_Receive_IT+0x134>)
 80042c6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2274      	movs	r2, #116	; 0x74
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	613b      	str	r3, [r7, #16]
  return(result);
 80042d6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042da:	2301      	movs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2190      	movs	r1, #144	; 0x90
 80042f2:	0049      	lsls	r1, r1, #1
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b00c      	add	sp, #48	; 0x30
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	000001ff 	.word	0x000001ff
 8004314:	080045cd 	.word	0x080045cd
 8004318:	08004465 	.word	0x08004465

0800431c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	617b      	str	r3, [r7, #20]
  return(result);
 800432a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
 800432e:	2301      	movs	r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4925      	ldr	r1, [pc, #148]	; (80043dc <UART_EndRxTransfer+0xc0>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	623b      	str	r3, [r7, #32]
  return(result);
 800435c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
 8004360:	2301      	movs	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438c:	2b01      	cmp	r3, #1
 800438e:	d118      	bne.n	80043c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	60bb      	str	r3, [r7, #8]
  return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439a:	2301      	movs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2110      	movs	r1, #16
 80043b2:	438a      	bics	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b00e      	add	sp, #56	; 0x38
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	fffffedf 	.word	0xfffffedf

080043e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	225a      	movs	r2, #90	; 0x5a
 80043f2:	2100      	movs	r1, #0
 80043f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2252      	movs	r2, #82	; 0x52
 80043fa:	2100      	movs	r1, #0
 80043fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff fbf1 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004416:	f3ef 8310 	mrs	r3, PRIMASK
 800441a:	60bb      	str	r3, [r7, #8]
  return(result);
 800441c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fbbe 	bl	8003bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b006      	add	sp, #24
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b090      	sub	sp, #64	; 0x40
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800446c:	203e      	movs	r0, #62	; 0x3e
 800446e:	183b      	adds	r3, r7, r0
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	215c      	movs	r1, #92	; 0x5c
 8004474:	5a52      	ldrh	r2, [r2, r1]
 8004476:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	d000      	beq.n	8004482 <UART_RxISR_8BIT+0x1e>
 8004480:	e095      	b.n	80045ae <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	213c      	movs	r1, #60	; 0x3c
 8004488:	187b      	adds	r3, r7, r1
 800448a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800448c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800448e:	187b      	adds	r3, r7, r1
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	183b      	adds	r3, r7, r0
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b2d9      	uxtb	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	400a      	ands	r2, r1
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	225a      	movs	r2, #90	; 0x5a
 80044b2:	5a9b      	ldrh	r3, [r3, r2]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b299      	uxth	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	225a      	movs	r2, #90	; 0x5a
 80044be:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	225a      	movs	r2, #90	; 0x5a
 80044c4:	5a9b      	ldrh	r3, [r3, r2]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d178      	bne.n	80045be <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044cc:	f3ef 8310 	mrs	r3, PRIMASK
 80044d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044d2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f383 8810 	msr	PRIMASK, r3
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4936      	ldr	r1, [pc, #216]	; (80045c8 <UART_RxISR_8BIT+0x164>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
 8004508:	2301      	movs	r3, #1
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	438a      	bics	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	2b01      	cmp	r3, #1
 8004542:	d12f      	bne.n	80045a4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8310 	mrs	r3, PRIMASK
 800454e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004550:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2110      	movs	r1, #16
 800456c:	438a      	bics	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f383 8810 	msr	PRIMASK, r3
}
 800457a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2210      	movs	r2, #16
 8004584:	4013      	ands	r3, r2
 8004586:	2b10      	cmp	r3, #16
 8004588:	d103      	bne.n	8004592 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2258      	movs	r2, #88	; 0x58
 8004596:	5a9a      	ldrh	r2, [r3, r2]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0011      	movs	r1, r2
 800459c:	0018      	movs	r0, r3
 800459e:	f7ff fb2b 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045a2:	e00c      	b.n	80045be <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fb fe3a 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 80045ac:	e007      	b.n	80045be <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2108      	movs	r1, #8
 80045ba:	430a      	orrs	r2, r1
 80045bc:	619a      	str	r2, [r3, #24]
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b010      	add	sp, #64	; 0x40
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	fffffedf 	.word	0xfffffedf

080045cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b090      	sub	sp, #64	; 0x40
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045d4:	203e      	movs	r0, #62	; 0x3e
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	215c      	movs	r1, #92	; 0x5c
 80045dc:	5a52      	ldrh	r2, [r2, r1]
 80045de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e4:	2b22      	cmp	r3, #34	; 0x22
 80045e6:	d000      	beq.n	80045ea <UART_RxISR_16BIT+0x1e>
 80045e8:	e095      	b.n	8004716 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	213c      	movs	r1, #60	; 0x3c
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80045f4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	183a      	adds	r2, r7, r0
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	4013      	ands	r3, r2
 8004606:	b29a      	uxth	r2, r3
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	225a      	movs	r2, #90	; 0x5a
 800461a:	5a9b      	ldrh	r3, [r3, r2]
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b299      	uxth	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	225a      	movs	r2, #90	; 0x5a
 8004626:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	225a      	movs	r2, #90	; 0x5a
 800462c:	5a9b      	ldrh	r3, [r3, r2]
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d178      	bne.n	8004726 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	617b      	str	r3, [r7, #20]
  return(result);
 800463a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4936      	ldr	r1, [pc, #216]	; (8004730 <UART_RxISR_16BIT+0x164>)
 8004656:	400a      	ands	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004666:	f3ef 8310 	mrs	r3, PRIMASK
 800466a:	623b      	str	r3, [r7, #32]
  return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
 8004670:	2301      	movs	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2101      	movs	r1, #1
 8004688:	438a      	bics	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d12f      	bne.n	800470c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8310 	mrs	r3, PRIMASK
 80046b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	2301      	movs	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2110      	movs	r1, #16
 80046d4:	438a      	bics	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	2210      	movs	r2, #16
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d103      	bne.n	80046fa <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2210      	movs	r2, #16
 80046f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2258      	movs	r2, #88	; 0x58
 80046fe:	5a9a      	ldrh	r2, [r3, r2]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff fa77 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800470a:	e00c      	b.n	8004726 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f7fb fd86 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8004714:	e007      	b.n	8004726 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2108      	movs	r1, #8
 8004722:	430a      	orrs	r2, r1
 8004724:	619a      	str	r2, [r3, #24]
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b010      	add	sp, #64	; 0x40
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	fffffedf 	.word	0xfffffedf

08004734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	2600      	movs	r6, #0
 8004748:	4d0c      	ldr	r5, [pc, #48]	; (800477c <__libc_init_array+0x38>)
 800474a:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	2600      	movs	r6, #0
 8004756:	f000 f821 	bl	800479c <_init>
 800475a:	4d0a      	ldr	r5, [pc, #40]	; (8004784 <__libc_init_array+0x40>)
 800475c:	4c0a      	ldr	r4, [pc, #40]	; (8004788 <__libc_init_array+0x44>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	00b3      	lsls	r3, r6, #2
 800476a:	58eb      	ldr	r3, [r5, r3]
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	00b3      	lsls	r3, r6, #2
 8004774:	58eb      	ldr	r3, [r5, r3]
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	080049ec 	.word	0x080049ec
 8004780:	080049ec 	.word	0x080049ec
 8004784:	080049ec 	.word	0x080049ec
 8004788:	080049f0 	.word	0x080049f0

0800478c <memset>:
 800478c:	0003      	movs	r3, r0
 800478e:	1882      	adds	r2, r0, r2
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	7019      	strb	r1, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
